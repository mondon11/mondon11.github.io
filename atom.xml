<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MonDon</title>
  <subtitle>Plain living and high thinking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://houjiateng.com/"/>
  <updated>2017-09-05T09:09:26.178Z</updated>
  <id>http://houjiateng.com/</id>
  
  <author>
    <name>MonDon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用python requests和bs4遍历下载某网站所有写真集</title>
    <link href="http://houjiateng.com/2017/09/04/%E5%88%A9%E7%94%A8python%20requests%E5%92%8Cbs4%E9%81%8D%E5%8E%86%E4%B8%8B%E8%BD%BD%E6%9F%90%E7%BD%91%E7%AB%99%E6%89%80%E6%9C%89%E5%86%99%E7%9C%9F%E9%9B%86/"/>
    <id>http://houjiateng.com/2017/09/04/利用python requests和bs4遍历下载某网站所有写真集/</id>
    <published>2017-09-04T08:52:35.000Z</published>
    <updated>2017-09-05T09:09:26.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>A thing of beauty is a joy forever.<br>　　　　　　　　　　　　　　- John Keats</p>
</blockquote>
<p>有研究表明，学习科研之余看看美女图片，有助于效率的提升。现在市面上有好多优质的写真集，比如推女郎、尤果网等等，这里我提供一个方法，利用python把所有优质写真集的所有期图片都下载下来。主要利用了requests和bs4这两个库：requests负责连接网络，处理http协议；bs4负责将网页变成结构化数据，方便爬取。下面我就直接贴代码了。python2.7可以成功运行。</p>
<a id="more"></a> 
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获取不同杂志的入口网址列表</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_area_list</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    raw_list=soup.findAll(<span class="string">'dt'</span>)</div><div class="line">    area_list=[]</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> raw_list:</div><div class="line">        <span class="keyword">if</span> item.find(<span class="string">'a'</span>):</div><div class="line">            area_list.append(item.find(<span class="string">'a'</span>).get(<span class="string">'href'</span>))</div><div class="line">    <span class="keyword">return</span> area_list</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获取某一杂志的网页总页数</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_num</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'span'</span>)</div><div class="line">    page=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'title'</span>):</div><div class="line">            ss = item.get(<span class="string">'title'</span>)</div><div class="line">            reg= re.compile(<span class="string">u'共(.+?)页'</span>)</div><div class="line">            <span class="keyword">if</span> reg.findall(ss):</div><div class="line">                page=int(reg.findall(ss)[<span class="number">0</span>].encode(<span class="string">'utf8'</span>).strip())</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> page</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">为了获得页数，必须访问非图片模式网址</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_noPicMode</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'a'</span>)</div><div class="line">    url_noPicMode=<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'class'</span>):</div><div class="line">            <span class="keyword">if</span> item.get(<span class="string">'class'</span>)==[<span class="string">'chked'</span>]:</div><div class="line">                url_noPicMode= item.get(<span class="string">'href'</span>)</div><div class="line">    <span class="keyword">return</span> url_noPicMode</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获得某一页所有写真集网址列表</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_album_list</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'a'</span>)</div><div class="line">    album_list=[]</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'onclick'</span>):</div><div class="line">            <span class="keyword">if</span> item.get(<span class="string">'onclick'</span>)==<span class="string">'atarget(this)'</span>:</div><div class="line">                album_list.append(item.get(<span class="string">'href'</span>))</div><div class="line">    <span class="keyword">return</span> album_list</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获得某一写真集所有图片的网址列表和该写真集名字</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pic_list</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'img'</span>)</div><div class="line">    pic_list=[]</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'file'</span>):</div><div class="line">            pic_list.append(item.get(<span class="string">'file'</span>))</div><div class="line">    _list=soup.findAll(<span class="string">'span'</span>)</div><div class="line">    album_name=<span class="string">'others'</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'id'</span>):</div><div class="line">            <span class="keyword">if</span> item.get(<span class="string">'id'</span>)==<span class="string">'thread_subject'</span>:</div><div class="line">                album_name = item.string</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> pic_list,album_name</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">下载并保存图片</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_pic</span><span class="params">(url,album_name,pic_num,local_path,fl)</span>:</span></div><div class="line">    count=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=count+<span class="number">1</span></div><div class="line">        <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">            time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">            fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">            fl.flush()</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            resp = conn.get(url, stream=<span class="keyword">True</span>,timeout=<span class="number">5</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> resp.status_code==<span class="number">200</span>:</div><div class="line">            s =album_name.encode(<span class="string">'utf-8'</span>).replace(<span class="string">'/'</span>,<span class="string">' '</span>).decode(<span class="string">'utf-8'</span>)</div><div class="line">            <span class="keyword">with</span> open(local_path+s+<span class="string">'/'</span>+str(pic_num)+<span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> resp.iter_content(chunk_size=<span class="number">1024</span>):</div><div class="line">                    <span class="keyword">if</span> chunk:</div><div class="line">                        f.write(chunk)</div><div class="line">                        f.flush()</div><div class="line">                f.close()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">        fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Download-uncompleted'</span>+<span class="string">'\n'</span>)</div><div class="line">        fl.flush()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> count</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">主程序流程:</span></div><div class="line"><span class="string">    获得不同杂志的入口网址列表 -&gt; </span></div><div class="line"><span class="string">    判断某一杂志的入口网址是否为无图模式，从而获得该杂志的网页总页数 -&gt;</span></div><div class="line"><span class="string">    获得某一杂志某一页的所有写真集入口网址列表 -&gt;</span></div><div class="line"><span class="string">    获得某一写真集所有图片的网址列表和该写真集名字 -&gt;</span></div><div class="line"><span class="string">    如果本地未存在该写真集，下载。</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    local_path=<span class="string">'c:/Users/mondon/Desktop/test_mv/'</span> <span class="comment">#自定义保存路径</span></div><div class="line">    url_base=<span class="string">'https://www.aisinei.com/'</span> <span class="comment">#网站基址</span></div><div class="line">    log=<span class="string">'error_log.txt'</span> <span class="comment">#记录访问时抛错的网址</span></div><div class="line"></div><div class="line">    conn=requests.session() <span class="comment">#创建session 传递cookie</span></div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(local_path+log,<span class="string">'a'</span>) <span class="keyword">as</span> fl:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        url_list=[]</div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=count+<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                fl.write(time_now+<span class="string">' : '</span>+url_base+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                fl.flush()</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                url_list=get_area_list(url_base) <span class="comment">#获得不同杂志的入口网址列表</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(url_list)):</div><div class="line">            count=<span class="number">0</span></div><div class="line">            url=<span class="string">''</span></div><div class="line">            <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                count=count+<span class="number">1</span></div><div class="line">                <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                    time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                    fl.write(time_now+<span class="string">' : '</span>+url_list[i]+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                    fl.flush()</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">try</span>: <span class="comment">#获得无图模式网址，为下面获得总页数做准备</span></div><div class="line">                    <span class="keyword">if</span> get_noPicMode(url_list[i]):</div><div class="line">                        url=get_noPicMode(url_list[i])</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        url=url_list[i]</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">            page=<span class="number">0</span></div><div class="line">            <span class="keyword">if</span> url:</div><div class="line">                count=<span class="number">0</span></div><div class="line">                <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                    count=count+<span class="number">1</span></div><div class="line">                    <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                        time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                        fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                        fl.flush()</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        page=get_page_num(url) <span class="comment">#获得某一杂志的总网页数</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">except</span>:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(page):</div><div class="line">                url=url_list[i].replace(<span class="string">'1'</span>,str(j+<span class="number">1</span>))</div><div class="line">                count=<span class="number">0</span></div><div class="line">                url_list_1=[]</div><div class="line">                <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                    count=count+<span class="number">1</span></div><div class="line">                    <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                        time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                        fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                        fl.flush()</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        url_list_1=get_album_list(url) <span class="comment">#获得某一网页的写真集网址列表</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">except</span>:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line"></div><div class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(url_list_1)):</div><div class="line">                    count=<span class="number">0</span></div><div class="line">                    url_list_2=[]</div><div class="line">                    album_name=<span class="string">''</span></div><div class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                        count=count+<span class="number">1</span></div><div class="line">                        <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                            time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                            fl.write(time_now+<span class="string">' : '</span>+url_list_1[k]+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                            fl.flush()</div><div class="line">                            <span class="keyword">break</span></div><div class="line">                        <span class="keyword">try</span>:</div><div class="line">                            url_list_2,album_name=get_pic_list(url_list_1[k]) <span class="comment">#获得该写真集的所有图片地址和写真集名字</span></div><div class="line">                            <span class="keyword">break</span></div><div class="line">                        <span class="keyword">except</span>:</div><div class="line">                            <span class="keyword">continue</span></div><div class="line">                    <span class="keyword">if</span> album_name: <span class="comment">#若本地不存在该写真集，则创建文件夹准备存储</span></div><div class="line">                        <span class="keyword">print</span> <span class="string">'准备下载: '</span>+album_name.encode(<span class="string">'utf-8'</span>)</div><div class="line">                        s =album_name.encode(<span class="string">'utf-8'</span>).replace(<span class="string">'/'</span>,<span class="string">' '</span>).decode(<span class="string">'utf-8'</span>)</div><div class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(local_path+s):</div><div class="line">                            os.makedirs(local_path+s)</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            <span class="keyword">print</span> <span class="string">' '</span>+album_name.encode(<span class="string">'utf-8'</span>)+<span class="string">' 已存在'</span></div><div class="line">                            <span class="keyword">continue</span></div><div class="line"></div><div class="line">                    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>,len(url_list_2),<span class="number">4</span>): <span class="comment">#四线程下载图片</span></div><div class="line">                        threads = []</div><div class="line">                        t1 = threading.Thread(target=download_pic,args=(url_list_2[m],album_name,m+<span class="number">1</span>,local_path,fl))</div><div class="line">                        threads.append(t1)</div><div class="line">                        <span class="keyword">if</span> m+<span class="number">1</span>&lt;len(url_list_2):</div><div class="line">                            t2 = threading.Thread(target=download_pic,args=(url_list_2[m+<span class="number">1</span>],album_name,m+<span class="number">2</span>,local_path,fl))</div><div class="line">                            threads.append(t2)</div><div class="line">                            <span class="keyword">if</span> m+<span class="number">2</span>&lt;len(url_list_2):</div><div class="line">                                t3 = threading.Thread(target=download_pic,args=(url_list_2[m+<span class="number">2</span>],album_name,m+<span class="number">3</span>,local_path,fl))</div><div class="line">                                threads.append(t3)</div><div class="line">                                <span class="keyword">if</span> m+<span class="number">3</span>&lt;len(url_list_2):</div><div class="line">                                    t4 = threading.Thread(target=download_pic,args=(url_list_2[m+<span class="number">3</span>],album_name,m+<span class="number">4</span>,local_path,fl))</div><div class="line">                                    threads.append(t4)</div><div class="line">                        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">                            t.setDaemon(<span class="keyword">True</span>)</div><div class="line">                            t.start()</div><div class="line">                        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">                            t.join(<span class="number">30</span>) <span class="comment">#30s超时时间</span></div><div class="line">                        <span class="keyword">print</span> m+<span class="number">1</span></div><div class="line"></div><div class="line">        fl.close()</div></pre></td></tr></table></figure>
<p><img src="http://ouzjv2e18.bkt.clouddn.com/meinvlist.png" alt="meinvlist.png"><br>如有侵权，请及时联系我，我会撤稿。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;A thing of beauty is a joy forever.&lt;br&gt;　　　　　　　　　　　　　　- John Keats&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有研究表明，学习科研之余看看美女图片，有助于效率的提升。现在市面上有好多优质的写真集，比如推女郎、尤果网等等，这里我提供一个方法，利用python把所有优质写真集的所有期图片都下载下来。主要利用了requests和bs4这两个库：requests负责连接网络，处理http协议；bs4负责将网页变成结构化数据，方便爬取。下面我就直接贴代码了。python2.7可以成功运行。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="requests" scheme="http://houjiateng.com/tags/requests/"/>
    
      <category term="bs4" scheme="http://houjiateng.com/tags/bs4/"/>
    
      <category term="beautifulsoup" scheme="http://houjiateng.com/tags/beautifulsoup/"/>
    
  </entry>
  
  <entry>
    <title>利用python requests帮你评教（国科大教务系统）</title>
    <link href="http://houjiateng.com/2017/08/29/%E5%88%A9%E7%94%A8python%20requests%E5%B8%AE%E4%BD%A0%E8%AF%84%E6%95%99%EF%BC%88%E5%9B%BD%E7%A7%91%E5%A4%A7%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
    <id>http://houjiateng.com/2017/08/29/利用python requests帮你评教（国科大教务系统）/</id>
    <published>2017-08-29T09:52:35.000Z</published>
    <updated>2017-08-29T10:00:05.159Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Talk is cheap, show me the code.<br> 　　　　　　　　　　　　　　　　　　-Linus Torvalds</p>
</blockquote>
<p>在国科大，如果你错过了评教，就看不到该课程的成绩，是不是很烦。我这里提供一个方法，即使你错过了评教时间，也能评教然后看到成绩。主要利用python的requests库，python2 和 python3 都测试成功。直接上代码吧!</p>
<a id="more"></a> 
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment">#创建session，传递cookie</span></div><div class="line">conn=requests.session()</div><div class="line"></div><div class="line"><span class="comment">#登录</span></div><div class="line"><span class="keyword">print</span> (<span class="string">'登录中...'</span>)</div><div class="line">url=<span class="string">'http://onestop.ucas.ac.cn/Ajax/Login/0'</span></div><div class="line">data=&#123;</div><div class="line">    <span class="string">'username'</span>:<span class="string">'xxx@xxx'</span>, <span class="comment">#你的登录邮箱</span></div><div class="line">    <span class="string">'password'</span>:<span class="string">'xxxxxx'</span>,  <span class="comment">#你的密码</span></div><div class="line">    <span class="string">'remember'</span>:<span class="string">'checked'</span></div><div class="line">&#125;</div><div class="line">headers=&#123;</div><div class="line">    <span class="string">'Accept'</span>:<span class="string">'*/*'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>:<span class="string">'gzip, deflate'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8'</span>,</div><div class="line">    <span class="string">'Connection'</span>:<span class="string">'keep-alive'</span>,</div><div class="line">    <span class="string">'Content-Length'</span>:<span class="string">'64'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</div><div class="line">    <span class="string">'Host'</span>:<span class="string">'onestop.ucas.ac.cn'</span>,</div><div class="line">    <span class="string">'rigin'</span>:<span class="string">'http://onestop.ucas.ac.cn'</span>,</div><div class="line">    <span class="string">'Referer'</span>:<span class="string">'http://onestop.ucas.ac.cn/home/index'</span>,</div><div class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'</span>,</div><div class="line">    <span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span></div><div class="line">&#125;</div><div class="line">resp=conn.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (<span class="string">'登陆完成！'</span>)</div><div class="line"></div><div class="line"><span class="comment">#进入选课系统</span></div><div class="line"><span class="keyword">print</span> (<span class="string">'进入评教系统...'</span>)</div><div class="line">url=json.loads(resp.text)[<span class="string">'msg'</span>]</div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">url=<span class="string">'http://sep.ucas.ac.cn/portal/site/226/821'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'window.location.href=\'(.+?)\''</span></div><div class="line">url_reg=re.compile(reg)</div><div class="line">url_list=url_reg.findall(resp.text)</div><div class="line">url=url_list[<span class="number">0</span>]</div><div class="line">resp=conn.get(url=url) <span class="comment">#访问重定向的网址 进入选课系统</span></div><div class="line"></div><div class="line"><span class="comment">#进入选择课程界面 获得query_string_paras</span></div><div class="line">url=<span class="string">'http://jwxk.ucas.ac.cn/courseManage/main'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'\"?s=(.+?)\";'</span></div><div class="line">url_reg=re.compile(reg)</div><div class="line">query_list=url_reg.findall(resp.text)</div><div class="line">query_string_paras=query_list[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment">#获取所选课程id号</span></div><div class="line">url=<span class="string">'http://jwxk.ucas.ac.cn/courseManage/selectedCourse'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'courseplan/+(.+?)\"'</span></div><div class="line">course_reg=re.compile(reg)</div><div class="line">course_list=course_reg.findall(resp.text)</div><div class="line"></div><div class="line"><span class="comment">#评教</span></div><div class="line"><span class="keyword">print</span> (<span class="string">'评教中,请耐心等待...'</span>)</div><div class="line">comment=&#123;</div><div class="line">    <span class="string">'1'</span>:<span class="string">'老师认真负责，作业布置的也十分合理，一学期下来收获很多'</span>,</div><div class="line">    <span class="string">'2'</span>:<span class="string">'老师讲的好，同学们听得都很认真，作业量也适中，希望老师继续保持下去'</span>,</div><div class="line">    <span class="string">'3'</span>:<span class="string">'老师的课讲得好，作业布置的合理，好好学能有很大收获'</span></div><div class="line">    &#125;</div><div class="line">data=&#123;str(x):<span class="string">'900'</span> <span class="keyword">for</span> x <span class="keyword">in</span> np.arange(<span class="number">900</span>)&#125;</div><div class="line">data_other=&#123;</div><div class="line">    <span class="comment">#5星 和 评价</span></div><div class="line">    <span class="string">'starFlag'</span>:<span class="string">'5'</span>,</div><div class="line">    <span class="string">'flaw'</span>:<span class="string">''</span>,</div><div class="line">    <span class="string">'suggest'</span>:<span class="string">''</span></div><div class="line">&#125;</div><div class="line">data.update(data_other)</div><div class="line"><span class="keyword">for</span> course <span class="keyword">in</span> course_list:</div><div class="line">    url=<span class="string">'http://jwxk.ucas.ac.cn/evaluate/save/'</span>+course+<span class="string">'?s='</span>+query_string_paras</div><div class="line">    data_merit=&#123;<span class="string">'merit'</span>:comment[random.choice([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>])]&#125;</div><div class="line">    data_new=data.copy()</div><div class="line">    data_new.update(data_merit)</div><div class="line">    resp=conn.post(url=url,data=data_new)</div><div class="line"><span class="keyword">print</span> (<span class="string">'评教完成！'</span>)</div></pre></td></tr></table></figure>
<p>本程序仅供学习使用，如对教务系统造成影响，我会撤稿。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Talk is cheap, show me the code.&lt;br&gt; 　　　　　　　　　　　　　　　　　　-Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在国科大，如果你错过了评教，就看不到该课程的成绩，是不是很烦。我这里提供一个方法，即使你错过了评教时间，也能评教然后看到成绩。主要利用python的requests库，python2 和 python3 都测试成功。直接上代码吧!&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="requests" scheme="http://houjiateng.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>使用Flask为对答机器人写个RESTful API</title>
    <link href="http://houjiateng.com/2017/08/22/%E4%BD%BF%E7%94%A8Flask%E4%B8%BA%E5%AF%B9%E7%AD%94%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%86%99%E4%B8%AARESTful%20API%20/"/>
    <id>http://houjiateng.com/2017/08/22/使用Flask为对答机器人写个RESTful API /</id>
    <published>2017-08-22T08:52:35.000Z</published>
    <updated>2017-08-24T03:28:35.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>During his own Google interview, Jeff Dean was asked the  implications if P=NP were true.  He said, “P = 0 or N = 1.” Then, before  the interviewer had even finished laughing, Jeff examined Google’s  public certificate and wrote the private key on the whiteboard. LOL</p>
</blockquote>
<p>上一篇文章讲了基于Tensorflow seq2seq 的对答机器人在阿里云上的部署（Flask+Nginx+Gunicorn），这里打算动手写个简单的RESTful API ，方便大家调用。因为我是个刚入门web开发的新手，所以这篇文章算是一个对实践的小小总结吧。</p>
<a id="more"></a> 
<h1 id="RESTful-API-简介"><a href="#RESTful-API-简介" class="headerlink" title="RESTful API 简介"></a>RESTful API 简介</h1><p><a href="https://www.zhihu.com/question/28557115/answer/48094438" target="_blank" rel="external">这里</a>有个关于RESTful API的通俗易懂的解释，写的很好，我就简单引用其中一段话吧：</p>
<blockquote>
<p>大家都知道”古代”网页是前端后端融在一起的，比如之前的PHP，JSP等。在之前的桌面时代问题不大，但是近年来移动互联网的发展，各种类型的Client层出不穷，RESTful可以通过一套统一的接口为 Web，iOS和Android提供服务。另外对于广大平台来说，比如Facebook platform，微博开放平台，微信公共平台等，它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful更是它们最好的选择。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　-覃超</p>
</blockquote>
<p><img src="http://ouzjv2e18.bkt.clouddn.com/restful%20API.jpg" alt="RESTful API.jpg"></p>
<h1 id="Flask实现RESTful-API"><a href="#Flask实现RESTful-API" class="headerlink" title="Flask实现RESTful API"></a>Flask实现RESTful API</h1><p>首先来说下HTTP的几种请求方式：</p>
<blockquote>
<p>HTTP定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　-<a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">hyddd</a></p>
</blockquote>
<h2 id="POST请求方式"><a href="#POST请求方式" class="headerlink" title="POST请求方式"></a>POST请求方式</h2><p>我之前写过简单的爬虫程序，发现POST和GET是两种最常用的请求方式。我们先动手实践下POST请求方式，完成”客户端发送什么，服务器端就返回什么”这样一个任务，然后在客户端打印出结果验证下：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">req = requests.post(url=url,data=data) </div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>创建server.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        dict_data=request.form <span class="comment">#type:ImmutableMultiDict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not POST'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！<br>我们也可以添加报头，服务端根据报头中的Content-Type字段来获知请求中的消息主体是用何种方式进行编码，再对消息主体进行解析。我们将上面的代码稍作改动，添加Content-Type为application/x-www-form-urlencoded的报头，以form表单提交数据：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>server.py不变<br>运行server.py，然后运行client.py，会输出’hello’，交互成功！实际上，第一个例子中，报头会自动添加application/x-www-form-urlencoded的Content-Type，所以这里server.py不变没有问题。<br>当然，我们还可以以json字符串形式提交数据，添加Content-Type为application/json的报头：<br>创建client.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;)</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>创建server.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        dict_data=request.get_json() <span class="comment">#dict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not POST'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！<br>但是如果我们去掉Content-Type为application/json的报头：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;)</div><div class="line">req = requests.post(url=url,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>server.py不变。<br>运行server.py，然后运行client.py，server端会报错！！！原来报头不会自动添加application/json的Content-Type，服务器端不能将请求数据解析为json，所以此时request对象的json属性为None，用get_json()方法自然就不行了。别慌，我们对server.py做如下改动即可：<br>创建server.py:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        str_data=request.get_data() <span class="comment">#str</span></div><div class="line">        dict_data=json.loads(str_data) <span class="comment">#dict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not POST'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！</p>
<h2 id="GET请求方式"><a href="#GET请求方式" class="headerlink" title="GET请求方式"></a>GET请求方式</h2><p>我们再来实践下GET请求：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">req = requests.get(url=url,params=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>创建server.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        dict_data=request.args <span class="comment">#type=ImmutableMultiDict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not GET'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！其实，我们在client.py加入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> (req.url)</div></pre></td></tr></table></figure></p>
<p>看到输出的url为<a href="http://127.0.0.1:5000/api?msg=hello" target="_blank" rel="external">http://127.0.0.1:5000/api?msg=hello</a> ，也就是说，GET请求的数据会附在url之后（就是把数据放置在HTTP协议头中），以?分割url和传输数据，并且参数之间以&amp;相连。我们在本地浏览器访问<a href="http://127.0.0.1:5000/api?msg=nice" target="_blank" rel="external">http://127.0.0.1:5000/api?msg=nice</a> ，就可以看到网页显示’nice’。<br><a href="http://docs.jinkan.org/docs/flask/api.html#id5" target="_blank" rel="external">这里</a>有Flask API的说明，可以看下”进入的请求对象”这一部分了解下request的属性和方法。</p>
<h2 id="状态码和错误处理"><a href="#状态码和错误处理" class="headerlink" title="状态码和错误处理"></a>状态码和错误处理</h2><p>最后再来讲下状态码和错误处理，这也是很重要的。我们比较熟悉的状态码有200-OK，400-Bad Request，404-Not Found，500 Internal Server Error等。正常情况下，用户将得到正确的结果，此时HTTP状态为200-OK ，但如果用户调用API的方式不当，服务器将会返回对应的错误，用户就可以根据状态码来判断错误类型进而调整调用方法。<br>但是，默认的错误信息比较笼统，比如返回400-Bad Request时，到底请求哪里出了问题，用户也很难判断。我们在使用Flask设计RESTful API时，可以使用@error_handler修饰器覆盖默认的Flask错误处理，自定义错误信息的描述，方便用户修改错误。举个例子：<br>我们创建server.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,jsonify</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        dict_data=request.args <span class="comment">#ImmutableMultiDict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> bad_method()</div><div class="line"></div><div class="line"><span class="meta">@app.errorhandler(405)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_method</span><span class="params">(error=None)</span>:</span></div><div class="line">    message=&#123;</div><div class="line">        <span class="string">'status'</span>:<span class="number">405</span>,</div><div class="line">        <span class="string">'message'</span>:<span class="string">'HTTP method only allows GET'</span></div><div class="line">    &#125;</div><div class="line">    resp=jsonify(message)</div><div class="line">    resp.status_code=<span class="number">405</span></div><div class="line">    <span class="keyword">return</span> resp</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">req = requests.post(url=url,data=data) </div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"message"</span>: <span class="string">"HTTP method only allows GET"</span>, </div><div class="line">  <span class="string">"status"</span>: 405</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看到这样的返回信息，我想用户很清楚调用API时错在哪了吧。</p>
<h1 id="对答机器人的调用示例"><a href="#对答机器人的调用示例" class="headerlink" title="对答机器人的调用示例"></a>对答机器人的调用示例</h1><p>在我的项目中，所有的API访问都是通过HTTP请求的方式。并且需要从<a href="http://101.200.59.7/api" target="_blank" rel="external">http://101.200.59.7/api</a> 进行访问。只支持GET和POST方式的HTTP请求。看下微信公众平台的调用效果吧：<br><img src="http://ouzjv2e18.bkt.clouddn.com/weixin_small.png" alt="wechat.png"><br>因为语料和模型还不完善，对答机器人还有些“弱智”。你可以加下面的公众号体验一下：<br><img src="http://ouzjv2e18.bkt.clouddn.com/scan.jpg" alt="scan.jpg"></p>
<h2 id="GET方式："><a href="#GET方式：" class="headerlink" title="GET方式："></a>GET方式：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗？'</span>&#125;</div><div class="line">req = requests.get(url=url,params=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<h2 id="POST方式："><a href="#POST方式：" class="headerlink" title="POST方式："></a>POST方式：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗？'</span>&#125;</div><div class="line">req = requests.post(url=url,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗？'</span>&#125;</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗'</span>&#125;)</div><div class="line">req = requests.post(url=url,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗'</span>&#125;)</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<h2 id="错误响应："><a href="#错误响应：" class="headerlink" title="错误响应："></a>错误响应：</h2><table>
<thead>
<tr>
<th>HTTP状态码</th>
<th>错误信息</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>400</td>
<td>msg must exist</td>
<td>数据必须以’msg’:’your data’形式传入</td>
</tr>
<tr>
<td>400</td>
<td>Content-Type must be application/json or application/x-www-form-urlencoded</td>
<td>报头只支持json和form两种形式</td>
</tr>
<tr>
<td>405</td>
<td>HTTP method must be GET or POST</td>
<td>HTTP请求只支持GET和POST</td>
</tr>
</tbody>
</table>
<p>其他错误请参考<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">这里</a>。</p>
<h1 id="遇坑小记"><a href="#遇坑小记" class="headerlink" title="遇坑小记"></a>遇坑小记</h1><p>以上示例代码在python2.7环境可以成功运行。在python3环境中需要注意：</p>
<ul>
<li>POST以不加报头的json形式传输数据时，对于服务器端，python3上 request.headers没有’Content-Type’这一项，而python2上’Content-Type’为空。 </li>
<li><a href="http://www.cnblogs.com/txw1958/archive/2012/07/19/2598885.html" target="_blank" rel="external">python3最重要的新特性大概要算是对文本和二进制数据作了更为清晰的区分</a>。python3 flask request.get_data()方法返回bytes，转成string需要decode(‘ascii’)。而python2 flask request.get_data()返回string。客户端打印结果req.content也有bytes和string的差别。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;During his own Google interview, Jeff Dean was asked the  implications if P=NP were true.  He said, “P = 0 or N = 1.” Then, before  the interviewer had even finished laughing, Jeff examined Google’s  public certificate and wrote the private key on the whiteboard. LOL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一篇文章讲了基于Tensorflow seq2seq 的对答机器人在阿里云上的部署（Flask+Nginx+Gunicorn），这里打算动手写个简单的RESTful API ，方便大家调用。因为我是个刚入门web开发的新手，所以这篇文章算是一个对实践的小小总结吧。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Flask" scheme="http://houjiateng.com/tags/Flask/"/>
    
      <category term="RESTful" scheme="http://houjiateng.com/tags/RESTful/"/>
    
      <category term="HTTP" scheme="http://houjiateng.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow+Flask+Nginx+Gunicorn 在阿里云的部署</title>
    <link href="http://houjiateng.com/2017/08/21/Tensorflow+Flask+Nginx+Gunicorn%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
    <id>http://houjiateng.com/2017/08/21/Tensorflow+Flask+Nginx+Gunicorn在阿里云的部署/</id>
    <published>2017-08-21T08:52:35.000Z</published>
    <updated>2017-08-31T10:14:38.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>生命在于折腾！</strong><br> 　　　　 　<strong>-某网友</strong> </p>
</blockquote>
<p>最近在做一个基于Tensorflow seq2seq 模型的对答机器人项目。模型的训练已经在本地完成（ubuntu 16.04 + python 3.5 +Tensorflow 1.2.1），对答也可以在本地用命令行形式进行，但是我并不满足这样的一种“枯燥”的展示方式，毕竟生命在于折腾，我决定尝试下Web端展示。<br>因为是第一次做python web开发，所以我的原则是用什么学什么。在做了简单的调研后，我决定采用下面的方式部署：</p>
<ul>
<li>vps：阿里云（学生有特惠）</li>
<li>Web框架：Flask（简单易上手）</li>
<li>服务器：Gunicorn+Nginx（稳定有效）</li>
</ul>
<a id="more"></a> 
<p>PS：本地系统是64位windows 7（另一台ubuntu主机在训练模型，卡的不行…）</p>
<h1 id="vps上的预准备"><a href="#vps上的预准备" class="headerlink" title="vps上的预准备"></a>vps上的预准备</h1><p>先来看下我租用的主机的配置吧，这个是最便宜的，对于我的应用足够了。（公网IP就是我项目的地址，欢迎访问。）<br><img src="http://ouzjv2e18.bkt.clouddn.com/vps.png" alt="vps.png"><br>在开始部署之前，我建议阅读下<a href="https://help.aliyun.com/document_detail/25429.html?spm=5176.doc51798.3.2.FQATex" target="_blank" rel="external">帮助与文档</a>，特别是对于像我一样的小白，可以少走不少弯路。<br>首先，我们要建立本地与vps的连接，来完成本地对远程服务器的模拟。Xshell、Putty等工具都可以，我采用的是Putty，具体步骤可以参考<a href="https://help.aliyun.com/document_detail/51798.html?spm=5176.doc25424.6.600.5gE5b6" target="_blank" rel="external">使用 SSH 密钥对连接 Linux 实例</a>。可是，按照步骤走下来，我们却发现连接不成功。我尝试ping了一下公网IP，居然也ping不通。原来，我们的安全组规则没有配置好。参考<a href="https://help.aliyun.com/knowledge_detail/40596.html?spm=5176.2020520129.105.3.77f56a74o8ztea" target="_blank" rel="external">ECS实例安全组默认的公网规则被删除导致无法ping通</a>：</p>
<blockquote>
<p>端口范围： 建议只开放 TCP 协议的端口 22 （用于 SSH） 、3389 （用于远程桌面）和 ICMP 协议（用户 PING 探测），用于探测和远程连接。</p>
</blockquote>
<p>添加这些安全组规则后，终于连接成功！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Welcome to Alibaba Cloud Elastic Compute Service !</div></pre></td></tr></table></figure></p>
<p>接下来，我们在vps上安装配置ftp服务，为后面上传项目代码做准备。具体可以参考<a href="https://yq.aliyun.com/articles/111559?spm=5176.8246799.0.0.s18sYq" target="_blank" rel="external">centos 7 安装配置ftp服务</a>。同样的问题又出现了，我们用<a href="http://jingyan.baidu.com/article/3f16e00307424b2590c1037d.html" target="_blank" rel="external">Filezilla连接阿里云</a>，发现连不上，原来和上面的那个问题一样，我们需要开放 TCP 协议的端口 20、21，做法和上面一样。另外，如果我们想上传文件到服务器上的某一文件夹中，我们需要修改该文件夹权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># chmod -R 777 [文件夹]</span></div></pre></td></tr></table></figure></p>
<p>至此，vps上的预准备完成。</p>
<h1 id="利用Anaconda安装Tensorflow"><a href="#利用Anaconda安装Tensorflow" class="headerlink" title="利用Anaconda安装Tensorflow"></a>利用Anaconda安装Tensorflow</h1><p>CentOS自带python2，因为我开发环境是python3，所以需要安装python3。并且，还要安装Tensorflow。这里我推荐用Anaconda，方便快捷。<br>首先，在本地<a href="https://www.continuum.io/downloads" target="_blank" rel="external">下载</a>对应版本的Anaconda，我这里选择的是Python 3.6 version。<br><img src="http://ouzjv2e18.bkt.clouddn.com/anaconda.png" alt="anaconda.png"><br>下载完成后，用FileZilla将其上传至服务器某一目录下，在putty上，cd到该目录，完成安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bash Anaconda3-4.4.0-Linux-x86_64.sh</span></div></pre></td></tr></table></figure></p>
<p>然后，建立一个Tensorflow的运行环境，并在conda环境中安装Tensorflow：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># conda create -n tensorflow python=3.5</span></div><div class="line"><span class="comment"># source activate tensorflow</span></div><div class="line"><span class="comment"># pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.1-cp35-cp35m-linux_x86_64.whl</span></div></pre></td></tr></table></figure></p>
<p>最后，测试安装是否成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python</span></div><div class="line">&gt;&gt;&gt; import tensorflow as tf</div><div class="line">&gt;&gt;&gt; hello=tf.constant(<span class="string">'hello world'</span>)</div><div class="line">&gt;&gt;&gt; sess=tf.Session()</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span> (sess.run(hello))</div><div class="line">&gt;&gt;&gt; <span class="built_in">exit</span>()</div></pre></td></tr></table></figure></p>
<p>退出Tensorflow环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source deactivate</span></div></pre></td></tr></table></figure></p>
<h1 id="安装Flask-Nginx-Gunicorn"><a href="#安装Flask-Nginx-Gunicorn" class="headerlink" title="安装Flask+Nginx+Gunicorn"></a>安装Flask+Nginx+Gunicorn</h1><p>首先安装Flask：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source activate tensorflow</span></div><div class="line"><span class="comment"># pip install flask</span></div></pre></td></tr></table></figure></p>
<p>然后我们测试下Flask是否安装成功。我们在本地创建个hello.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug=<span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>将此文件上传至服务器 /home/mondon/www/my_flask中（你可以自定义），在putty上cd到此目录下，运行此文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python hello.py</span></div></pre></td></tr></table></figure></p>
<p>这时，你在本地打开浏览器，输入你的公网IP和端口号（我是101.200.59.7:5000），会看到网页上显示如下，表明Flask安装成功。<br><img src="http://ouzjv2e18.bkt.clouddn.com/helloworld.png" alt="helloworld.png"><br>按Ctrl+C退出运行hello.py。</p>
<blockquote>
<p>我们知道 Flask 中自带了 web server，通过 Werkzeug，我们可以搭建 WSGI 服务，运行我们的网站，但 Flask 是 Web 框架，并不是 Web 服务器，尽管 Werkzeug 很强大，但只能用于开发，不能用于生产。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　-<a href="http://www.cnblogs.com/knarfeh/p/5616515.html" target="_blank" rel="external">knarfeh</a></p>
</blockquote>
<p>生产环境中，通常采用Gunicorn/uWSGI+Nginx的组合作为web服务器，因为我没有什么web开发经历，对此了解也不深，就先跟着老司机走了。<br>下面安装Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum install nginx</span></div></pre></td></tr></table></figure></p>
<p>修改Nginx默认配置，我的Nginx配置文件在 /etc/nginx/nginx.conf，修改nginx.conf中的如下位置的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80 default_server;</div><div class="line">    listen       [::]:80 default_server;</div><div class="line">    server_name  101.200.59.7; <span class="comment">#你的公网IP</span></div><div class="line">    root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">    <span class="comment"># Load configuration files for the default server block.</span></div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8000; <span class="comment"># 这里是指向gunicorn host的服务地址，后面会讲。</span></div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后运行Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx</span></div></pre></td></tr></table></figure></p>
<p>这时还是在本地浏览器输入你的公网IP，会有如下显示，Nginx配置完成：<br><img src="http://ouzjv2e18.bkt.clouddn.com/nginx.png" alt="nginx"><br>关闭nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx -s stop</span></div></pre></td></tr></table></figure></p>
<p>我们再来安装Gunicorn：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pip install gunicorn</span></div></pre></td></tr></table></figure></p>
<p>好了，所有的配置已经完成，接下来就是如何启动我们的项目了。我们先cd到hello.py所在的目录下，然后依次启动Nginx、Gunicorn，我们的hello.py项目就启动了！（注意，这里127.0.0.1:8000 与上面nginx配置要一致）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx</span></div><div class="line"><span class="comment"># nohup gunicorn -b 127.0.0.1:8000 hello:app &amp;</span></div></pre></td></tr></table></figure></p>
<p>访问公网IP来验证下：<br><img src="http://ouzjv2e18.bkt.clouddn.com/helloworld2.png" alt="helloworld.png"></p>
<h1 id="Tensorflow项目的部署"><a href="#Tensorflow项目的部署" class="headerlink" title="Tensorflow项目的部署"></a>Tensorflow项目的部署</h1><p>既然”hello world”项目都已经实现了，Tensorflow项目也是如出一辙了。<br>先来看下我项目的截图吧，Web前端设计来自<a href="https://github.com/undersail/easybot" target="_blank" rel="external">undersail</a>，很漂亮！<br><img src="http://ouzjv2e18.bkt.clouddn.com/msbot_new.png" alt="msbot.png"><br>在本地，我已经将模型训练好了，因此，我们只要把模型和代码一并上传。然后在启动文件中（类似于上面的hello.py），先初始化并加载模型，然后开始监听端口。有post请求时，将接收到的’msg’信息feed到我们的seq2seq模型，就可以得到对答机器人的回答了。<br>项目代码已托管于<a href="https://github.com/MSintern/msbot_seq2seq" target="_blank" rel="external">github</a>，我们下篇博客见~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;生命在于折腾！&lt;/strong&gt;&lt;br&gt; 　　　　 　&lt;strong&gt;-某网友&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在做一个基于Tensorflow seq2seq 模型的对答机器人项目。模型的训练已经在本地完成（ubuntu 16.04 + python 3.5 +Tensorflow 1.2.1），对答也可以在本地用命令行形式进行，但是我并不满足这样的一种“枯燥”的展示方式，毕竟生命在于折腾，我决定尝试下Web端展示。&lt;br&gt;因为是第一次做python web开发，所以我的原则是用什么学什么。在做了简单的调研后，我决定采用下面的方式部署：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vps：阿里云（学生有特惠）&lt;/li&gt;
&lt;li&gt;Web框架：Flask（简单易上手）&lt;/li&gt;
&lt;li&gt;服务器：Gunicorn+Nginx（稳定有效）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Tensorflow" scheme="http://houjiateng.com/tags/Tensorflow/"/>
    
      <category term="Flask" scheme="http://houjiateng.com/tags/Flask/"/>
    
      <category term="vps" scheme="http://houjiateng.com/tags/vps/"/>
    
      <category term="Nginx" scheme="http://houjiateng.com/tags/Nginx/"/>
    
      <category term="Gunicorn" scheme="http://houjiateng.com/tags/Gunicorn/"/>
    
  </entry>
  
</feed>
