<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MonDon</title>
  <subtitle>Welcome to my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-21T08:53:46.354Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MonDon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tensorflow + Flask + Nginx + Gunicorn 在阿里云的部署</title>
    <link href="http://yoursite.com/2017/08/21/Tensorflow%20+%20Flask%20+%20Nginx%20+%20Gunicorn%20%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2017/08/21/Tensorflow + Flask + Nginx + Gunicorn 在阿里云的部署/</id>
    <published>2017-08-21T08:52:35.000Z</published>
    <updated>2017-08-21T08:53:46.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>生命在于折腾！</strong><br> 　　　　 　<strong>-某网友</strong> </p>
</blockquote>
<p>最近在做一个基于Tensorflow seq2seq 模型的对答机器人项目。模型的训练已经在本地完成（ubuntu 16.04 + python 3.5 +Tensorflow 1.2.1），对答也可以在本地用命令行形式进行，但是我并不满足这样的一种“枯燥”的展示方式，毕竟生命在于折腾，我决定尝试下Web端展示。（下一篇Blog我将介绍下模型的实现。）<br>因为是第一次做python web开发，所以我的原则是用什么学什么。在做了简单的调研后，我决定采用下面的方式部署：</p>
<ul>
<li>vps：阿里云（学生有特惠）</li>
<li>Web框架：Flask（简单易上手）</li>
<li>服务器：Gunicorn+Nginx（稳定有效）</li>
</ul>
<a id="more"></a> 
<p>PS：本地系统是64位windows 7（另一台ubuntu主机在训练模型，卡的不行…）</p>
<h1 id="vps上的预准备"><a href="#vps上的预准备" class="headerlink" title="vps上的预准备"></a>vps上的预准备</h1><p>先来看下我租用的主机的配置吧，这个是最便宜的，对于我的应用足够了。（公网IP就是我项目的地址，欢迎访问。）<br><img src="http://ouzjv2e18.bkt.clouddn.com/vps.png" alt="vps.png"><br>在开始部署之前，我建议阅读下<a href="https://help.aliyun.com/document_detail/25429.html?spm=5176.doc51798.3.2.FQATex" target="_blank" rel="external">帮助与文档</a>，特别是对于像我一样的小白，可以少走不少弯路。<br>首先，我们要建立本地与vps的连接，来完成本地对远程服务器的模拟。Xshell、Putty等工具都可以，我采用的是Putty，具体步骤可以参考<a href="https://help.aliyun.com/document_detail/51798.html?spm=5176.doc25424.6.600.5gE5b6" target="_blank" rel="external">使用 SSH 密钥对连接 Linux 实例</a>。可是，按照步骤走下来，我们却发现连接不成功。我尝试ping了一下公网IP，居然也ping不通。原来，我们的安全组规则没有配置好。参考<a href="https://help.aliyun.com/knowledge_detail/40596.html?spm=5176.2020520129.105.3.77f56a74o8ztea" target="_blank" rel="external">ECS实例安全组默认的公网规则被删除导致无法ping通</a>：</p>
<blockquote>
<p>端口范围： 建议只开放 TCP 协议的端口 22 （用于 SSH） 、3389 （用于远程桌面）和 ICMP 协议（用户 PING 探测），用于探测和远程连接。</p>
</blockquote>
<p>添加这些安全组规则后，终于连接成功！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Welcome to Alibaba Cloud Elastic Compute Service !</div></pre></td></tr></table></figure></p>
<p>接下来，我们在vps上安装配置ftp服务，为后面上传项目代码做准备。具体可以参考<a href="https://yq.aliyun.com/articles/111559?spm=5176.8246799.0.0.s18sYq" target="_blank" rel="external">centos 7 安装配置ftp服务</a>。同样的问题又出现了，我们用<a href="http://jingyan.baidu.com/article/3f16e00307424b2590c1037d.html" target="_blank" rel="external">Filezilla连接阿里云</a>，发现连不上，原来和上面的那个问题一样，我们需要开放 TCP 协议的端口 20、21，做法和上面一样。另外，如果我们想上传文件到服务器上的某一文件夹中，我们需要修改该文件夹权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># chmod -R 777 [文件夹]</span></div></pre></td></tr></table></figure></p>
<p>至此，vps上的预准备完成。</p>
<h1 id="利用Anaconda安装Tensorflow"><a href="#利用Anaconda安装Tensorflow" class="headerlink" title="利用Anaconda安装Tensorflow"></a>利用Anaconda安装Tensorflow</h1><p>CentOS自带python2，因为我开发环境是python3，所以需要安装python3。并且，还要安装Tensorflow。这里我推荐用Anaconda，方便快捷。<br>首先，在本地<a href="https://www.continuum.io/downloads" target="_blank" rel="external">下载</a>对应版本的Anaconda，我这里选择的是Python 3.6 version。<br><img src="http://ouzjv2e18.bkt.clouddn.com/anaconda.png" alt="anaconda.png"><br>下载完成后，用FileZilla将其上传至服务器某一目录下，在putty上，cd到该目录，完成安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bash Anaconda3-4.4.0-Linux-x86_64.sh</span></div></pre></td></tr></table></figure></p>
<p>然后，建立一个Tensorflow的运行环境，并在conda环境中安装Tensorflow：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># conda create -n tensorflow python=3.5</span></div><div class="line"><span class="comment"># source activate tensorflow</span></div><div class="line"><span class="comment"># pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.1-cp35-cp35m-linux_x86_64.whl</span></div></pre></td></tr></table></figure></p>
<p>最后，测试安装是否成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python</span></div><div class="line">&gt;&gt;&gt; import tensorflow as tf</div><div class="line">&gt;&gt;&gt; hello=tf.constant(<span class="string">'hello world'</span>)</div><div class="line">&gt;&gt;&gt; sess=tf.Session()</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span> (sess.run(hello))</div><div class="line">&gt;&gt;&gt; <span class="built_in">exit</span>()</div></pre></td></tr></table></figure></p>
<p>退出Tensorflow环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source deactivate</span></div></pre></td></tr></table></figure></p>
<h1 id="安装Flask-Nginx-Gunicorn"><a href="#安装Flask-Nginx-Gunicorn" class="headerlink" title="安装Flask+Nginx+Gunicorn"></a>安装Flask+Nginx+Gunicorn</h1><p>首先安装Flask：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source activate tensorflow</span></div><div class="line"><span class="comment"># pip install flask</span></div></pre></td></tr></table></figure></p>
<p>然后我们测试下Flask是否安装成功。我们在本地创建个hello.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug=<span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>将此文件上传至服务器 /home/mondon/www/my_flask中（你可以自定义），在putty上cd到此目录下，运行此文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python hello.py</span></div></pre></td></tr></table></figure></p>
<p>这时，你在本地打开浏览器，输入你的公网IP和端口号（我是101.200.59.7:5000），会看到网页上显示如下，表明Flask安装成功。<br><img src="http://ouzjv2e18.bkt.clouddn.com/helloworld.png" alt="helloworld.png"><br>按Ctrl+C退出运行hello.py。</p>
<blockquote>
<p>我们知道 Flask 中自带了 web server，通过 Werkzeug，我们可以搭建 WSGI 服务，运行我们的网站，但 Flask 是 Web 框架，并不是 Web 服务器，尽管 Werkzeug 很强大，但只能用于开发，不能用于生产。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　-<a href="http://www.cnblogs.com/knarfeh/p/5616515.html" target="_blank" rel="external">knarfeh</a></p>
</blockquote>
<p>生产环境中，通常采用Gunicorn/uWSGI+Nginx的组合作为web服务器，因为我没有什么web开发经历，对此了解也不深，就先跟着老司机走了。<br>下面安装Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum install nginx</span></div></pre></td></tr></table></figure></p>
<p>修改Nginx默认配置，我的Nginx配置文件在 /etc/nginx/nginx.conf，修改nginx.conf中的如下位置的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80 default_server;</div><div class="line">    listen       [::]:80 default_server;</div><div class="line">    server_name  101.200.59.7; <span class="comment">#你的公网IP</span></div><div class="line">    root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">    <span class="comment"># Load configuration files for the default server block.</span></div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8000; <span class="comment"># 这里是指向gunicorn host的服务地址，后面会讲。</span></div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后运行Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx</span></div></pre></td></tr></table></figure></p>
<p>这时还是在本地浏览器输入你的公网IP，会有如下显示，Nginx配置完成：<br><img src="http://ouzjv2e18.bkt.clouddn.com/nginx.png" alt="nginx"><br>关闭nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx -s stop</span></div></pre></td></tr></table></figure></p>
<p>我们再来安装Gunicorn：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pip install gunicorn</span></div></pre></td></tr></table></figure></p>
<p>好了，所有的配置已经完成，接下来就是如何启动我们的项目了。我们先cd到hello.py所在的目录下，然后依次启动Nginx、Gunicorn，我们的hello.py项目就启动了！（注意，这里127.0.0.1:8000 与上面nginx配置要一致）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx</span></div><div class="line"><span class="comment"># nohup gunicorn -b 127.0.0.1:8000 hello:app &amp;</span></div></pre></td></tr></table></figure></p>
<p>访问公网IP来验证下：<br><img src="http://ouzjv2e18.bkt.clouddn.com/helloworld2.png" alt="helloworld.png"></p>
<h1 id="Tensorflow项目的部署"><a href="#Tensorflow项目的部署" class="headerlink" title="Tensorflow项目的部署"></a>Tensorflow项目的部署</h1><p>既然”hello world”项目都已经实现了，Tensorflow项目也是如出一辙了。<br>先来看下我项目的截图吧，Web前端设计来自<a href="https://github.com/undersail/easybot" target="_blank" rel="external">undersail</a>，很漂亮！<br><img src="http://ouzjv2e18.bkt.clouddn.com/msbot.png" alt="msbot.png"><br>在本地，我已经将模型训练好了，因此，我们只要把模型和代码一并上传。然后在启动文件中（类似于上面的hello.py），先初始化并加载模型，然后开始监听端口。有post请求时，将接收到的’msg’信息feed到我们的seq2seq模型，就可以得到对答机器人的回答了。<br>在下一篇blog中，我将介绍下这个对答机器人是如何实现的，敬请期待~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;生命在于折腾！&lt;/strong&gt;&lt;br&gt; 　　　　 　&lt;strong&gt;-某网友&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在做一个基于Tensorflow seq2seq 模型的对答机器人项目。模型的训练已经在本地完成（ubuntu 16.04 + python 3.5 +Tensorflow 1.2.1），对答也可以在本地用命令行形式进行，但是我并不满足这样的一种“枯燥”的展示方式，毕竟生命在于折腾，我决定尝试下Web端展示。（下一篇Blog我将介绍下模型的实现。）&lt;br&gt;因为是第一次做python web开发，所以我的原则是用什么学什么。在做了简单的调研后，我决定采用下面的方式部署：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vps：阿里云（学生有特惠）&lt;/li&gt;
&lt;li&gt;Web框架：Flask（简单易上手）&lt;/li&gt;
&lt;li&gt;服务器：Gunicorn+Nginx（稳定有效）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="vps" scheme="http://yoursite.com/tags/vps/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="Gunicorn" scheme="http://yoursite.com/tags/Gunicorn/"/>
    
  </entry>
  
</feed>
