<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MonDon</title>
  <subtitle>Plain living and high thinking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://houjiateng.com/"/>
  <updated>2017-10-27T09:16:22.119Z</updated>
  <id>http://houjiateng.com/</id>
  
  <author>
    <name>MonDon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>愿你走出半生，归来仍是少年</title>
    <link href="http://houjiateng.com/2017/10/27/%E6%84%BF%E4%BD%A0%E8%B5%B0%E5%87%BA%E5%8D%8A%E7%94%9F%EF%BC%8C%E5%BD%92%E6%9D%A5%E4%BB%8D%E6%98%AF%E5%B0%91%E5%B9%B4/"/>
    <id>http://houjiateng.com/2017/10/27/愿你走出半生，归来仍是少年/</id>
    <published>2017-10-27T08:52:35.000Z</published>
    <updated>2017-10-27T09:16:22.119Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>亲爱的自己：<br>我不知道为什么写信给你，更不知道你何时能收到这封信，在这里有些愿望寄托于你。<br>首先愿你平安无事的度过青春期，但别平安无事的度过青春。你不是他们口中的乖乖女，这点我比谁都清楚。你有时果断、激动甚至有点“草莽精神”的意思，着实下来我一跳。<br>愿你的世界里天天都是好天气，即使忘带了伞也要告诉自己：宝宝今天偏要淋雨！原来驱赶阴霾的太阳是明媚的自己。<br>愿你的成熟不是逼迫，学着笑而不语，学着承认不相信，学着接受不尽人意。我知道，你是一个急性子，但请慢慢来，不着急。<br>愿你拥有好运气，对一切充满感激。喜欢美好，也喜欢自己。你笑起来有一颗虎牙和一个酒窝，这点很好。<br>愿你有盔甲也有软肋，善良得有原则，感性得有底线。对可恶的，就该连本带利地还回去，凶狠之后别失礼仪：对不起，弄伤了你，可我是个女孩，我必须保护好自己。<br>愿你不饶点滴，不饶自己。所做的一切都是为了自己，所有的结果都由自己承担，没有理由，没有借口。<br>愿你一生努力，一生被爱。在最糟糕的的那天和注定的人撞个满怀。也许你正在坠入爱河，但千万别淹死其中。爱不到的人就别等了，别把尊严弄丢后又到处哭泣，找个愿意陪你虚度光阴的一起老去吧。<br>愿你活成自己想要的模样。不必取悦任何人，也不无故讨厌某个人。你总是偷偷在意其他人的眼光，为此苦恼，为此忧愁！其实无所谓的东西不必放在心里，短短几十年，谁又将和谁永远在一起，都让它随风去吧！<br>愿你付出甘之如饴，所得归于欢喜。有人说你不甘平庸，其实你只是想遇见那个更好的自己，只是别忘了偶尔停下来，就当犒劳那努力的自己。<br>愿你可以走过长长的路，有丰盈的时间发生故事，若没人陪你颠沛流离，便以梦为马，随处而栖。<br>愿你在最无趣的日子仍对世界充满好奇，撑不住了就去睡一觉，等一等，说不定随时绽放奇迹。<br>愿你有高跟鞋但穿着球鞋，愿你一辈子下来心上没有补丁，愿你的每次流泪都是喜极而泣，愿你筋疲力尽时有树可倚，愿你学会释怀后一身轻。<br>愿你走出半生，归来仍是少年。<br>不知不觉写了这么多，希望你别让它们都变成空话。我是不是太注重“以后”了？未来是什么样的就交给未来的自己回答吧，谁知道明天会发生什么，你知道吗？<br>祝：<br>一生久安，岁月无忧！<br>曾经的你<br>2017年3月12日</p>
</blockquote>
<p>上文来自北京四中一初二女孩，读后颇受感触，特予大家分享至此。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;亲爱的自己：&lt;br&gt;我不知道为什么写信给你，更不知道你何时能收到这封信，在这里有些愿望寄托于你。&lt;br&gt;首先愿你平安无事的度过青春期，但别平安无事的度过青春。你不是他们口中的乖乖女，这点我比谁都清楚。你有时果断、激动甚至有点“草莽精神”的意思，着实
    
    </summary>
    
      <category term="其他" scheme="http://houjiateng.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="散文" scheme="http://houjiateng.com/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>《经济学原理》 小记1</title>
    <link href="http://houjiateng.com/2017/10/22/%E3%80%8A%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E3%80%8B%20%E5%B0%8F%E8%AE%B01/"/>
    <id>http://houjiateng.com/2017/10/22/《经济学原理》 小记1/</id>
    <published>2017-10-22T08:52:35.000Z</published>
    <updated>2017-10-23T10:59:33.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="经济学十大原理："><a href="#经济学十大原理：" class="headerlink" title="经济学十大原理："></a>经济学十大原理：</h1><h2 id="人们如何作出决策："><a href="#人们如何作出决策：" class="headerlink" title="人们如何作出决策："></a>人们如何作出决策：</h2><ol>
<li>人们面临交替关系</li>
<li>某些东西的成本是为了得到它所放弃的东西</li>
<li>理性人考虑边际量</li>
<li>人们会对激励作出反应</li>
</ol>
<h2 id="人们如何相互交易："><a href="#人们如何相互交易：" class="headerlink" title="人们如何相互交易："></a>人们如何相互交易：</h2><ol>
<li>贸易能使每个人状况更好</li>
<li>市场通常是组织经济活动的一种好方法</li>
<li>政府有时可以改善市场结果</li>
</ol>
<h2 id="整个经济如何运行："><a href="#整个经济如何运行：" class="headerlink" title="整个经济如何运行："></a>整个经济如何运行：</h2><ol>
<li>一国的生活水平取决于它生产物品与劳务的能力</li>
<li>当政府发行过多货币时，物价上升</li>
<li>社会面临通货膨胀与失业之间的短期交替关系</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;经济学十大原理：&quot;&gt;&lt;a href=&quot;#经济学十大原理：&quot; class=&quot;headerlink&quot; title=&quot;经济学十大原理：&quot;&gt;&lt;/a&gt;经济学十大原理：&lt;/h1&gt;&lt;h2 id=&quot;人们如何作出决策：&quot;&gt;&lt;a href=&quot;#人们如何作出决策：&quot; class=&quot;he
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="经济学" scheme="http://houjiateng.com/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow Fall Symposium 2017 小记</title>
    <link href="http://houjiateng.com/2017/10/20/Tensorflow%20Fall%20Symposium%202017%20%E5%B0%8F%E8%AE%B0/"/>
    <id>http://houjiateng.com/2017/10/20/Tensorflow Fall Symposium 2017 小记/</id>
    <published>2017-10-20T08:52:35.000Z</published>
    <updated>2017-10-20T02:00:06.420Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>艺术的价值同其唤起的感情强度无关，后者可以无需艺术。<br>　　　　　　　　　　　　　　　　　　　　　-昆德拉</p>
</blockquote>
<a id="more"></a> 
<ol>
<li><p>CPU、GPU库：<br>Intel: MKL-DNN<br>NVIDIA: cuDNN</p>
</li>
<li><p>跨平台：<br>2.1 deeplearn.js:<br>deeplearn.js 是一个可用于机器智能并加速 WebGL 的开源 JavaScript 库。deeplearn.js 提供高效的机器学习构建模块，使我们能够在浏览器中训练神经网络或在推断模式中运行预训练模型。它提供构建可微数据流图的 API，以及一系列可直接使用的数学函数。<br>2.2 Tensorflow serving:<br>TensorFlow Serving 是一个用于机器学习模型 serving 的高性能开源库。它可以将训练好的机器学习模型部署到线上，使用 gRPC 作为接口接受外部调用。更加让人眼前一亮的是，它支持模型热更新与自动模型版本管理。这意味着一旦部署 TensorFlow Serving 后，你再也不需要为线上服务操心，只需要关心你的线下模型训练。<br>2.3 Tensorflow lite:<br>移动端在推断模式中运行预训练模型。Flatbuffers。</p>
</li>
<li><p>eager execution 及早执行：使对python语言更友好。</p>
</li>
<li><p>Cloud TPU:<br>第一代：推理。<br>第二代：训练+推理。脉动阵列（systolic array）系统。</p>
</li>
<li><p>数据处理：<br>1.4版本: tf.data (之前版本为tf.contrib.data)<br>异步多线程计算：<br>Queue是TF队列和缓存机制的实现<br>QueueRunner是TF中对操作Queue的线程的封装<br>Coordinator是TF中用来协调线程运行的工具<br>除了常用的feed，两个input接口:<br>Dataset API<br>Iterator API</p>
</li>
<li><p>高级API:<br>1.4版本推出 tf.keras</p>
</li>
<li><p>有趣的方向：<br>Magenta项目: 生成艺术作品</p>
</li>
</ol>
<p><img src="http://ouzjv2e18.bkt.clouddn.com/tf_fall_sym_2017_small.jpg" alt="tf_fall_sym_2017.jpg"></p>
<blockquote>
<p>最后祝你，身体健康，再见！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;艺术的价值同其唤起的感情强度无关，后者可以无需艺术。&lt;br&gt;　　　　　　　　　　　　　　　　　　　　　-昆德拉&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Tensorflow" scheme="http://houjiateng.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>基于Tensorflow seq2seq模型的聊天机器人的实现</title>
    <link href="http://houjiateng.com/2017/10/17/%E5%9F%BA%E4%BA%8ETensorflow%20seq2seq%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://houjiateng.com/2017/10/17/基于Tensorflow seq2seq模型的聊天机器人的实现/</id>
    <published>2017-10-17T08:52:35.000Z</published>
    <updated>2017-10-17T06:33:52.627Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>To see a world in a grain of sand<br>And a heaven in a wild flower<br>Hold infinity in the palm of your hand<br>And eternity in an hour<br>　　　　　　　　　　-William Blake</p>
</blockquote>
<p>上面这首诗出自英国著名浪漫主义诗人威廉-布雷克。在“深度学习”被炒得火热的“大数据时代”，我们也应该从某一技术点切入，动手尝试之后能有所收获，做到“以管窥豹，可见一斑”自然是极好的了。这里我就从“Chatbot(聊天机器人)”说开去，简单讲一下基于Tensorflow seq2seq模型的聊天机器人的实现，算是抛砖引玉吧！</p>
<a id="more"></a> 
<h1 id="Chatbot的前世今生"><a href="#Chatbot的前世今生" class="headerlink" title="Chatbot的前世今生"></a>Chatbot的前世今生</h1><p>总的来看，Chatbot从诞生之初到现在，总共经历了三代：</p>
<h2 id="第一代，关键词匹配检索阶段"><a href="#第一代，关键词匹配检索阶段" class="headerlink" title="第一代，关键词匹配检索阶段"></a>第一代，关键词匹配检索阶段</h2><p>第一代Chatbot实现起来很简单，就是根据用户输入的关键词，从数据库中匹配得到相应的回答，以此回复用户。即便是在“人工智能”大肆“入侵”我们生活的今天，这类机器人也大量存在于我们的生活中，比如微信公众号的“回复xx得到相应文章”、运营商的“回复xx跳转服务”等等。不过，这类机器人只适用于问法明确的简单场景，当应用场景相对复杂时，这类机器人就需要维护一个非常庞大的关键词列表，而且这个列表很难覆盖全表达同一意义的不同的关键词，这就会影响到最终匹配的精度和结果。</p>
<h2 id="第二代，在检索基础上引入自然语言处理（NLP）技术"><a href="#第二代，在检索基础上引入自然语言处理（NLP）技术" class="headerlink" title="第二代，在检索基础上引入自然语言处理（NLP）技术"></a>第二代，在检索基础上引入自然语言处理（NLP）技术</h2><p>与第一代Chatbot相比，这一代机器人就显得更像人了：因为用户可以与它用句子交流而不是词了。利用自然语言处理（NLP）技术，如分词、词性标注等，把句子掰开揉碎，然后根据诸如词语加权检索等算法，在知识库中匹配检索得到最佳回答。从这一代机器人身上，我们可以看到些许“人工智能”的影子了：它似乎可以理解用户要表达的意思了。比如当用户以不同的问法提问时，如“我要订外卖”、“我想买外卖”等，聊天机器人会给出一致的合理的回答。不过，这一代机器人语义理解能力有限，匹配精度不高，而且由于问答策略是基于规则（或模板）的，这就需要大量的人工工作来维护知识库的完备性。尽管如此，这一代机器人还是比上一代机器人性能上有了显著的提升。</p>
<h2 id="第三代，以神经网络为基础，引入深度学习等技术"><a href="#第三代，以神经网络为基础，引入深度学习等技术" class="headerlink" title="第三代，以神经网络为基础，引入深度学习等技术"></a>第三代，以神经网络为基础，引入深度学习等技术</h2><p>与上一代机器人相比，因为引入了“深度学习”技术，这一代机器人可以打破人工配置的规则，以一种数据驱动（data-driven）的方式，获得更好的自主学习能力和语义理解能力，可以处理更加口语化、多样化的问法，而且极大地减少了人工工作量。利用多层神经网络的巧妙搭建，这一代机器人可以自主地学习到句子的不同层次的抽象特征，从而在语义理解的能力上有了质的提高。但是这类机器人受制于训练语料库的规模，国内只有阿里“小蜜”、百度“度秘”等少数科技巨头把这一代聊天机器人应用于客服上。<br>我们这里要讲的基于seq2seq模型的Chatbot就是属于第三代聊天机器人。为什么要用seq2seq模型呢？因为它火呀！我们所熟悉的大名鼎鼎的谷歌翻译，就是采用了这个模型，翻译效果我想大家都有目共睹吧！<br>事实上，seq2seq模型只是属于Chatbot的对话生成（response generation）阶段，一个优秀的Chatbot还应该具有对话状态跟踪（dialog state tracking）机制和用户建模（user modeling）机制，这样既可以理解和捕捉用户的真实意图，又可以为用户个性化地定制私人bot。在这篇文章中，我们只讨论对话生成阶段，下面的章节我就带你一步步实现基于seq2seq模型的聊天机器人。</p>
<h1 id="实现基于seq2seq模型的Chatbot"><a href="#实现基于seq2seq模型的Chatbot" class="headerlink" title="实现基于seq2seq模型的Chatbot"></a>实现基于seq2seq模型的Chatbot</h1><p>我们先来看下seq2seq模型的基本结构。下面的动图来自谷歌官方项目<a href="https://github.com/google/seq2seq" target="_blank" rel="external">seq2seq</a>。谷歌也发布了他们用seq2seq模型进行神经机器翻译的<a href="https://github.com/tensorflow/models/tree/master/tutorials/rnn/translate" target="_blank" rel="external">demo</a>。事实上，聊天机器人的对话生成和神经机器翻译十分相似，无非就是训练样本的差异罢了。<br><img src="http://ouzjv2e18.bkt.clouddn.com/seq2seq_translate.gif" alt="seq2seq_translate.gif"><br>可以看到，seq2seq 是一个 Encoder–Decoder 结构的网络，它的输入是一个序列，输出也是一个序列，这是一种end-to-end方式，seq2seq由此得名。<br>为了更好的解释该模型的工作流程，我们再贴一张来自《Sequence to Sequence Learning with Neural Networks》一文的插图。<br><img src="http://ouzjv2e18.bkt.clouddn.com/seq2seq.png" alt="seq2seq.png"><br>这里，“ABC” 被“翻译”为“WXYZ” ，&lt;EOS&gt;代表一句话的结束。简单来说，作为Encoder的RNN把输入的可变长度的sequence表示成一个固定大小的状态向量（fixed-size state vector）（可以理解为进行了语义编码），而作为decoder的RNN，则根据encoder的vector（背景知识），将这个固定长度的向量变成可变长度的目标的信号序列。<br>细心的你可能会发现，decoder就相当于对输入只知道梗概意思，而无法得到更多输入的细节，比如输入的位置信息。如果输入的句子比较短、意思比较简单，翻译起来还行，长了复杂了效果应该就不好了。事实上也正是如此。为了解决这一问题，学者们提出了一个attention机制（上面那个动图上也标志了attention）。用谷歌自己的话来说，attention机制使解码器更接近输入（allow the decoder more direct access to the input）， 使解码的每一阶段都兼顾输入（allow the decoder to peek into the input at every decoding step）。</p>
<h2 id="语料准备"><a href="#语料准备" class="headerlink" title="语料准备"></a>语料准备</h2><p>计算机领域有句名言：“输入的是垃圾，输出的也是垃圾”（garbage in,garbage out）。这用在机器学习领域再贴切不过了。机器能学到什么，依赖于训练的输入，也就好比是人类的教材。为什么现在深度学习、数据挖掘领域的绝大部分成果都出自科技巨头？就是因为他们手握海量数据呀！<br>在对市面上的中文语料资源做了比较充分的调研之后，从<a href="https://github.com/candlewill/Dialog_Corpus" target="_blank" rel="external">这里</a>找到了一些不错的语料库。虽然只利用这些语料难以训练出一个优质的Chatbot，但是作为练手还是绰绰有余了。<br>我这里选用小黄鸡语料，先来看下语料的格式吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">E</div><div class="line">M 呵/呵</div><div class="line">M 是/王/若/猫/的/。</div><div class="line">E</div><div class="line">M 不/是</div><div class="line">M 那/是/什/么/？</div><div class="line">E</div><div class="line">M 怎/么/了</div><div class="line">M 我/很/难/过/，/安/慰/我/~</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>首先，采用sqlite数据库对语料按照&lt;ask,answer&gt;格式进行存储,以方便后续操作。存储后格式如下：<br><img src="http://ouzjv2e18.bkt.clouddn.com/conversation_db.png" alt="conversation_db.png"><br>其次，创建词汇表。为什么要创建词汇表呢？因为机器学习的模型是要以数字而非字符进行输入训练的，我们创建一个比较完备的词汇表后，就可以用索引号来表示某一个字，类似one-hot思想。那么怎么创建呢？可以有两种思路：第一种就是脱离我们采用的语料资源，直接利用常用汉字建一个词汇表；第二种就是考虑我们的语料资源，按照字的出现频率从大到小进行排序后选取前N个构建词汇表。大多数研究都是选用第二种方法，我们也一样，这里N取5000。也许你会问，如果某个字不在词汇表中怎么办？我们就用“&lt;unk&gt;”的索引号代替即可（&lt;unk&gt;、&lt;eos&gt;、&lt;pad&gt;、&lt;go&gt;要手动添加到词汇表）。<br>最后，考虑到seq2seq的bucket机制，我们对已有的数据库进行拆分，按照&lt;ask,answer&gt;的规模生成4个不同的数据库。规模划分依据如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># We use a number of buckets and pad to the closest one for efficiency.</span></div><div class="line"><span class="comment"># See seq2seq_model.Seq2SeqModel for details of how they work.</span></div><div class="line">buckets = [(<span class="number">5</span>, <span class="number">15</span>), (<span class="number">10</span>, <span class="number">20</span>), (<span class="number">15</span>, <span class="number">25</span>), (<span class="number">20</span>, <span class="number">30</span>)]</div></pre></td></tr></table></figure></p>
<p>至于为什么seq2seq要采用bucket机制，因为虽然RNN在数学上是可以处理任意长度的数据的，但是，在TensorFlow中使用bucket的原因主要是为了工程实现的效率。<a href="https://www.zhihu.com/question/42057513/answer/93421874" target="_blank" rel="external">这里</a>有一个比较好的解释。<br>经过以上三步，我们的语料准备阶段就告一段落了。</p>
<h2 id="模型搭建"><a href="#模型搭建" class="headerlink" title="模型搭建"></a>模型搭建</h2><p>模型的搭建可以参考谷歌发布的机器翻译模型的<a href="https://github.com/tensorflow/models/tree/master/tutorials/rnn/translate" target="_blank" rel="external">demo</a>中的seq2seq_model.py，我这里就我模型中的几个细节部分进行简单的阐述。<br>首先，Encoder、Decoder的RNN采用多层LSTM模型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># LSTM cells</span></div><div class="line">cell = tf.contrib.rnn.BasicLSTMCell(size)</div><div class="line">cell = tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob = dropout)</div><div class="line">cell = tf.contrib.rnn.MultiRNNCell([cell] * num_layers)</div></pre></td></tr></table></figure></p>
<p>其次，在对话生成、神经机器翻译中，训练的复杂度以及解码的复杂度和词汇表的大小成正比。当输出的词汇表很大时，传统的softmax由于要计算每一个类的logits就会有问题。我们采用sampled softmax方法来减小计算开销：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Sampled softmax only makes sense if we sample less than vocabulary size.</span></div><div class="line"><span class="keyword">if</span> num_samples &gt; <span class="number">0</span> <span class="keyword">and</span> num_samples &lt; self.target_vocab_size:</div><div class="line">  w_t = tf.get_variable(<span class="string">"proj_w"</span>, [self.target_vocab_size, size], dtype=dtype)</div><div class="line">  w = tf.transpose(w_t)</div><div class="line">  b = tf.get_variable(<span class="string">"proj_b"</span>, [self.target_vocab_size], dtype=dtype)</div><div class="line">  output_projection = (w, b)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sampled_loss</span><span class="params">(labels, logits)</span>:</span></div><div class="line">    labels = tf.reshape(labels, [<span class="number">-1</span>, <span class="number">1</span>])</div><div class="line">    <span class="comment"># We need to compute the sampled_softmax_loss using 32bit floats to</span></div><div class="line">    <span class="comment"># avoid numerical instabilities.</span></div><div class="line">    local_w_t = tf.cast(w_t, tf.float32)</div><div class="line">    local_b = tf.cast(b, tf.float32)</div><div class="line">    local_inputs = tf.cast(logits, tf.float32)</div><div class="line">    <span class="keyword">return</span> tf.cast(</div><div class="line">        tf.nn.sampled_softmax_loss(</div><div class="line">            weights=local_w_t,</div><div class="line">            biases=local_b,</div><div class="line">            labels=labels,</div><div class="line">            inputs=local_inputs,</div><div class="line">            num_sampled=num_samples,</div><div class="line">            num_classes=self.target_vocab_size),</div><div class="line">        dtype)</div><div class="line">  softmax_loss_function = sampled_loss</div></pre></td></tr></table></figure></p>
<p>再次，采用attention方法来解决长距离依赖关系问题：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The seq2seq function: we use embedding for the input and attention.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">seq2seq_f</span><span class="params">(encoder_inputs, decoder_inputs, do_decode)</span>:</span></div><div class="line">  <span class="keyword">return</span> tf.contrib.legacy_seq2seq.embedding_attention_seq2seq(</div><div class="line">      encoder_inputs,</div><div class="line">      decoder_inputs,</div><div class="line">      cell,</div><div class="line">      num_encoder_symbols=source_vocab_size,</div><div class="line">      num_decoder_symbols=target_vocab_size,</div><div class="line">      embedding_size=size,</div><div class="line">      output_projection=output_projection,</div><div class="line">      feed_previous=do_decode,</div><div class="line">      dtype=dtype)</div></pre></td></tr></table></figure></p>
<p>最后，创建get_batch()方法，来为每步训练的批量梯度下降提供batch大小的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_batch</span><span class="params">(self, bucket_id, data)</span>:</span></div><div class="line">    encoder_size, decoder_size = self.buckets[bucket_id]</div><div class="line">    encoder_inputs, decoder_inputs = [], []</div><div class="line">    <span class="keyword">for</span> encoder_input, decoder_input <span class="keyword">in</span> data:</div><div class="line">        encoder_input = data_utils.sentence_indice(encoder_input)</div><div class="line">        decoder_input = data_utils.sentence_indice(decoder_input)</div><div class="line">        <span class="comment"># Encoder</span></div><div class="line">        encoder_pad = [data_utils.PAD_ID] * (</div><div class="line">            encoder_size - len(encoder_input)</div><div class="line">        )</div><div class="line">        encoder_inputs.append(list(reversed(encoder_input + encoder_pad)))</div><div class="line">        <span class="comment"># Decoder</span></div><div class="line">        decoder_pad_size = decoder_size - len(decoder_input) - <span class="number">2</span></div><div class="line">        decoder_inputs.append(</div><div class="line">            [data_utils.GO_ID] + decoder_input +</div><div class="line">            [data_utils.EOS_ID] +</div><div class="line">            [data_utils.PAD_ID] * decoder_pad_size</div><div class="line">        )</div><div class="line">    batch_encoder_inputs, batch_decoder_inputs, batch_weights = [], [], []</div><div class="line">    <span class="comment"># batch encoder</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(encoder_size):</div><div class="line">        batch_encoder_inputs.append(np.array(</div><div class="line">            [encoder_inputs[j][i] <span class="keyword">for</span> j <span class="keyword">in</span> range(self.batch_size)],</div><div class="line">            dtype=np.int32</div><div class="line">        ))</div><div class="line">    <span class="comment"># batch decoder</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(decoder_size):</div><div class="line">        batch_decoder_inputs.append(np.array(</div><div class="line">            [decoder_inputs[j][i] <span class="keyword">for</span> j <span class="keyword">in</span> range(self.batch_size)],</div><div class="line">            dtype=np.int32</div><div class="line">        ))</div><div class="line">        batch_weight = np.ones(self.batch_size, dtype=np.float32)</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(self.batch_size):</div><div class="line">            <span class="keyword">if</span> i &lt; decoder_size - <span class="number">1</span>:</div><div class="line">                target = decoder_inputs[j][i + <span class="number">1</span>]</div><div class="line">            <span class="keyword">if</span> i == decoder_size - <span class="number">1</span> <span class="keyword">or</span> target == data_utils.PAD_ID:</div><div class="line">                batch_weight[j] = <span class="number">0.0</span></div><div class="line">        batch_weights.append(batch_weight)</div><div class="line">    <span class="keyword">return</span> batch_encoder_inputs, batch_decoder_inputs, batch_weights</div></pre></td></tr></table></figure></p>
<h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>下面我们就实例化模型，然后喂数据进行训练。由于代码比较容易理解，我就直接贴上来了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># prepare data</span></div><div class="line">    print(<span class="string">'preparing data...'</span>)</div><div class="line">    bucket_dbs = data_utils.read_bucket_dbs(FLAGS.buckets_dir)</div><div class="line">    bucket_sizes = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(buckets)):</div><div class="line">        bucket_size = bucket_dbs[i].size</div><div class="line">        bucket_sizes.append(bucket_size)</div><div class="line">        print(<span class="string">'Bucket &#123;&#125; has &#123;&#125; data'</span>.format(i, bucket_size))</div><div class="line">    total_size = sum(bucket_sizes)</div><div class="line">    print(<span class="string">'Total data size: &#123;&#125; '</span>.format(total_size))</div><div class="line"></div><div class="line">    <span class="comment"># create model and train</span></div><div class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">        model = create_model(sess, <span class="keyword">False</span>)</div><div class="line">        sess.run(tf.initialize_all_variables())</div><div class="line">        buckets_scale = [</div><div class="line">            sum(bucket_sizes[:i + <span class="number">1</span>]) / total_size</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bucket_sizes))</div><div class="line">        ]</div><div class="line">        <span class="comment"># for nice display</span></div><div class="line">        metrics = <span class="string">'  '</span>.join([</div><div class="line">            <span class="string">'\r[&#123;&#125;]'</span>,</div><div class="line">            <span class="string">'&#123;:.1f&#125;%'</span>,</div><div class="line">            <span class="string">'&#123;&#125;/&#123;&#125;'</span>,</div><div class="line">            <span class="string">'loss=&#123;:.3f&#125;'</span>,</div><div class="line">            <span class="string">'&#123;&#125;/&#123;&#125;'</span>,</div><div class="line">            <span class="string">'lr=&#123;:.5f&#125;'</span></div><div class="line">        ])</div><div class="line">        bars_max = <span class="number">20</span></div><div class="line">        <span class="keyword">for</span> epoch_index <span class="keyword">in</span> range(<span class="number">1</span>, FLAGS.num_epoch + <span class="number">1</span>):</div><div class="line">            print(<span class="string">'Epoch &#123;&#125;:'</span>.format(epoch_index))</div><div class="line">            time_start = time.time()</div><div class="line">            epoch_trained = <span class="number">0</span></div><div class="line">            batch_loss = []</div><div class="line">            previous_losses=[]</div><div class="line">            current_step=<span class="number">0</span></div><div class="line">            loss=<span class="number">0</span></div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                <span class="comment"># select one bucket</span></div><div class="line">                random_number = np.random.random_sample()</div><div class="line">                bucket_id = min([</div><div class="line">                    i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(buckets_scale))</div><div class="line">                    <span class="keyword">if</span> buckets_scale[i] &gt; random_number</div><div class="line">                ])</div><div class="line">                data, data_in = model.get_batch_data(</div><div class="line">                    bucket_dbs,</div><div class="line">                    bucket_id</div><div class="line">                )</div><div class="line">                encoder_inputs, decoder_inputs, decoder_weights = model.get_batch(</div><div class="line">                    bucket_dbs,</div><div class="line">                    bucket_id,</div><div class="line">                    data</div><div class="line">                )</div><div class="line">                _, step_loss, output = model.step(</div><div class="line">                    sess,</div><div class="line">                    encoder_inputs,</div><div class="line">                    decoder_inputs,</div><div class="line">                    decoder_weights,</div><div class="line">                    bucket_id,</div><div class="line">                    <span class="keyword">False</span></div><div class="line">                )</div><div class="line"></div><div class="line">                loss=step_loss/FLAGS.steps_per_checkpoint</div><div class="line">                current_step+=<span class="number">1</span></div><div class="line"></div><div class="line">                <span class="comment"># every steps_per_checkpoint check if decay learning rate</span></div><div class="line">                <span class="comment"># and save model</span></div><div class="line">                <span class="keyword">if</span> current_step % FLAGS.steps_per_checkpoint == <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> len(previous_losses) &gt; <span class="number">2</span> <span class="keyword">and</span> loss &gt; max(previous_losses[<span class="number">-3</span>:]):</div><div class="line">                        sess.run(model.learning_rate_decay_op)</div><div class="line">                    previous_losses.append(loss)</div><div class="line">                    loss = <span class="number">0</span></div><div class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.model_dir):</div><div class="line">                        os.makedirs(FLAGS.model_dir)</div><div class="line">                    model.saver.save(sess, os.path.join(FLAGS.model_dir, FLAGS.model_name))</div><div class="line"></div><div class="line">                epoch_trained += FLAGS.batch_size</div><div class="line">                batch_loss.append(step_loss)</div><div class="line">                time_now = time.time()</div><div class="line">                time_spend = time_now - time_start</div><div class="line">                time_estimate = time_spend / (epoch_trained / FLAGS.num_per_epoch)</div><div class="line">                percent = min(<span class="number">100</span>, epoch_trained / FLAGS.num_per_epoch) * <span class="number">100</span></div><div class="line">                bars = math.floor(percent / <span class="number">100</span> * bars_max)</div><div class="line"></div><div class="line">                <span class="comment"># display metrics</span></div><div class="line">                sys.stdout.write(metrics.format(</div><div class="line">                    <span class="string">'='</span> * bars + <span class="string">'-'</span> * (bars_max - bars),</div><div class="line">                    percent,</div><div class="line">                    epoch_trained, FLAGS.num_per_epoch,</div><div class="line">                    np.mean(batch_loss),</div><div class="line">                    data_utils.time(time_spend), data_utils.time(time_estimate),model.learning_rate.eval()</div><div class="line">                ))</div><div class="line">                sys.stdout.flush()</div><div class="line">                <span class="keyword">if</span> epoch_trained &gt;= FLAGS.num_per_epoch:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            print(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># save model</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.model_dir):</div><div class="line">            os.makedirs(FLAGS.model_dir)</div><div class="line">        model.saver.save(sess, os.path.join(FLAGS.model_dir, FLAGS.model_name))</div></pre></td></tr></table></figure></p>
<h2 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h2><p>Chatbot response的评价很难，虽然说可以借鉴机器翻译的自动评价方法BLEU来做，但效果不会太好。几乎每篇语言生成模型的paper都是会花钱雇人来做人工评价，设计一套评价机制来打分，人工的评价会更具有说服力。<br>我们这里所说的模型测试只是让用户与机器人自由聊天，然后看下机器人的回答靠不靠谱。在控制台即可实现这样一种对话方式。<br>我这里利用Flask进行了Chatbot的web端的部署，方便用户用浏览器与机器人对话：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Flask</span></div><div class="line"><span class="meta">@app.route('/message', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">()</span>:</span></div><div class="line">    req_msg = request.form[<span class="string">'msg'</span>]</div><div class="line">    res_msg = seq2seq.decode_line(sess, model, req_msg)</div><div class="line">    <span class="keyword">return</span> jsonify( &#123; <span class="string">'text'</span>: res_msg &#125; )</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_line</span><span class="params">(sess, model, sentence)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestBucket</span><span class="params">(object)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sentence)</span>:</span></div><div class="line">            self.sentence = sentence</div><div class="line">        <span class="comment"># for generating response: feed one ask, no answer.</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">random</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="keyword">return</span> sentence, <span class="string">''</span></div><div class="line">    <span class="comment"># Which bucket does it belong to?</span></div><div class="line">    bucket_id = min([</div><div class="line">        b <span class="keyword">for</span> b <span class="keyword">in</span> range(len(buckets))</div><div class="line">        <span class="keyword">if</span> buckets[b][<span class="number">0</span>] &gt; len(sentence)</div><div class="line">    ])</div><div class="line">    <span class="comment"># Get a 1-element batch to feed the sentence to the model.</span></div><div class="line">    data, _ = model.get_batch_data(</div><div class="line">        &#123;bucket_id: TestBucket(sentence)&#125;,</div><div class="line">        bucket_id</div><div class="line">    )</div><div class="line">    encoder_inputs, decoder_inputs, decoder_weights = model.get_batch(</div><div class="line">        bucket_id,</div><div class="line">        data</div><div class="line">    )</div><div class="line">    <span class="comment"># Get output logits for the sentence.</span></div><div class="line">    _, _, output_logits = model.step(</div><div class="line">        sess,</div><div class="line">        encoder_inputs,</div><div class="line">        decoder_inputs,</div><div class="line">        decoder_weights,</div><div class="line">        bucket_id,</div><div class="line">        <span class="keyword">True</span></div><div class="line">    )</div><div class="line">    <span class="comment"># This is a greedy decoder - outputs are just argmaxes of output_logits.</span></div><div class="line">    outputs = [int(np.argmax(logit, axis=<span class="number">1</span>)) <span class="keyword">for</span> logit <span class="keyword">in</span> output_logits]</div><div class="line">    <span class="comment"># return response sentence corresponding to outputs.</span></div><div class="line">    ret = data_utils.indice_sentence(outputs)</div><div class="line">    <span class="keyword">return</span> ret</div></pre></td></tr></table></figure>
<p>来看下效果吧（web前端设计来自<a href="https://github.com/undersail/easybot" target="_blank" rel="external">undersail</a>）。嗯，看来这个Chatbot表现的还算不错。<br><img src="http://ouzjv2e18.bkt.clouddn.com/msbot_newnew.png" alt="chatbot.png"></p>
<h1 id="参考文章与链接"><a href="#参考文章与链接" class="headerlink" title="参考文章与链接"></a>参考文章与链接</h1><ol>
<li><a href="http://www.eeworld.com.cn/qrs/article_2016081529734.html" target="_blank" rel="external">干货篇：一文看懂聊天机器人所有猫腻</a></li>
<li><a href="https://www.huxiu.com/article/148498/1.html?f=column_feed_article" target="_blank" rel="external">智能聊天机器人这么火，为啥国人把它用到了客户服务上？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22081325" target="_blank" rel="external">RNN Encoder–Decoder的attention机制简介</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/seq2seq.html" target="_blank" rel="external">Sequence-to-Sequence Models</a></li>
<li><a href="https://github.com/tensorflow/models/tree/master/tutorials/rnn/translate" target="_blank" rel="external">Tensorflow官方translate模型</a></li>
<li><a href="https://github.com/qhduan/Seq2Seq_Chatbot_QA" target="_blank" rel="external">使用TensorFlow实现的Sequence to Sequence的聊天机器人模型</a></li>
<li><a href="https://github.com/undersail/easybot" target="_blank" rel="external">easybot</a></li>
<li><a href="https://github.com/candlewill/Dialog_Corpus" target="_blank" rel="external">用于对话系统的中英文语料</a></li>
<li><a href="https://arxiv.org/abs/1409.3215v3" target="_blank" rel="external">Sutskever I, Vinyals O, Le Q V. Sequence to sequence learning with neural networks[J]. 2014, 4:3104-3112.</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;To see a world in a grain of sand&lt;br&gt;And a heaven in a wild flower&lt;br&gt;Hold infinity in the palm of your hand&lt;br&gt;And eternity in an hour&lt;br&gt;　　　　　　　　　　-William Blake&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面这首诗出自英国著名浪漫主义诗人威廉-布雷克。在“深度学习”被炒得火热的“大数据时代”，我们也应该从某一技术点切入，动手尝试之后能有所收获，做到“以管窥豹，可见一斑”自然是极好的了。这里我就从“Chatbot(聊天机器人)”说开去，简单讲一下基于Tensorflow seq2seq模型的聊天机器人的实现，算是抛砖引玉吧！&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Tensorflow" scheme="http://houjiateng.com/tags/Tensorflow/"/>
    
      <category term="seq2seq" scheme="http://houjiateng.com/tags/seq2seq/"/>
    
      <category term="attention" scheme="http://houjiateng.com/tags/attention/"/>
    
  </entry>
  
  <entry>
    <title>利用python itchat库实现微信操控电脑</title>
    <link href="http://houjiateng.com/2017/10/11/%E5%88%A9%E7%94%A8python%20itchat%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%93%8D%E6%8E%A7%E7%94%B5%E8%84%91/"/>
    <id>http://houjiateng.com/2017/10/11/利用python itchat库实现微信操控电脑/</id>
    <published>2017-10-11T08:52:35.000Z</published>
    <updated>2017-10-12T01:12:09.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>古之为英雄豪杰者，不过面厚心黑而已。<br>　　　　　　　　　　　　　　　- 李宗吾</p>
</blockquote>
<p>最近因为要做微信版的智能客服系统，所以看了看有关wechat的api，发现了一个很好的python库<a href="http://itchat.readthedocs.io/zh/latest/" target="_blank" rel="external">itchat</a>，于是乎想用它做一些好玩的有用的程序。想到最近挂机跑深度学习模型的痛楚，遂决定做一个微信版的remote-CMD，可以用手机微信远程监控电脑运行状态（截屏），同时可以远程通过命令提示符操作PC，实现远程运行程序、搜索电脑文件并下载到手机等“炫酷”的功能，先上代码吧！</p>
<a id="more"></a> 
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#coding=utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> itchat</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screen_img</span><span class="params">(filename)</span>:</span></div><div class="line">    img=ImageGrab.grab()</div><div class="line">    img.save(filename)</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(msg)</span>:</span></div><div class="line">    content=msg[<span class="string">'Text'</span>]</div><div class="line">    <span class="keyword">if</span> msg[<span class="string">'ToUserName'</span>]==<span class="string">'filehelper'</span>:</div><div class="line">        <span class="keyword">print</span> content</div><div class="line">        <span class="keyword">if</span> content==<span class="string">'jp'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'$send screen image'</span></div><div class="line">            time_now=time.strftime(<span class="string">'%Y_%m_%d_%H_%M_%S'</span>,time.localtime(time.time()))</div><div class="line">            picname=time_now+<span class="string">'.png'</span></div><div class="line">            get_screen_img(picname)</div><div class="line">            itchat.send(<span class="string">'@img@'</span>+picname,<span class="string">'filehelper'</span>)</div><div class="line">        <span class="keyword">elif</span> content.split()[<span class="number">0</span>]==<span class="string">'xz'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'$send file'</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                itchat.send_file(content.split()[<span class="number">1</span>],<span class="string">'filehelper'</span>)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                itchat.send(<span class="string">u'命令无效!'</span>,<span class="string">'filehelper'</span>)</div><div class="line">        <span class="keyword">elif</span> content.split()[<span class="number">0</span>]==<span class="string">'cd'</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                os.chdir(content.split()[<span class="number">1</span>])</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                itchat.send(<span class="string">u'命令无效!'</span>,<span class="string">'filehelper'</span>)</div><div class="line">        <span class="keyword">elif</span> content.split()[<span class="number">0</span>]==<span class="string">'dir'</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                ret=os.popen(content).read().decode(<span class="string">'gbk'</span>)</div><div class="line">                itchat.send(ret,<span class="string">'filehelper'</span>)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                itchat.send(<span class="string">u'命令无效或内部错误!'</span>,<span class="string">'filehelper'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                ret=os.popen(content).read().decode(<span class="string">'utf-8'</span>)</div><div class="line">                itchat.send(ret,<span class="string">'filehelper'</span>)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                itchat.send(<span class="string">u'命令无效或内部错误!'</span>,<span class="string">'filehelper'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">itchat.run()</div></pre></td></tr></table></figure>
<p>温馨小提示：</p>
<ol>
<li>开发环境：win7 64bit + python 2.7</li>
<li>由于requests的编码问题，需要将<a href="https://gist.github.com/littlecodersh/9a0c5466f442d67d910f877744011705" target="_blank" rel="external">fields.py</a>文件放入 Lib\site-packages\urllib3下覆盖原文件才可传输中文名文件。（我的路径是C:\Users\mondon\Anaconda2\Lib\site-packages\urllib3，仅供参考。如果上面的下载链接打不开，可点击<a href="http://ouzjv2e18.bkt.clouddn.com/fields.py" target="_blank" rel="external">这个</a>，将其复制下来另存为fields.py即可）</li>
<li>使用方法：<br>3.1 首先需要添加“文件传输助手”为好友。以后的操作都是通过与“助手”文字对话完成的。<br>3.2 运行程序，手机扫码登录。登录成功控制台会有提示。<br>3.3 几个常见功能命令：<br>截屏：jp<br>下载：xz File (如 xz c:\test\1.txt)<br>常见cmd：ls (查看当前路径下所有目录); cd FilePath (切换路径，如cd c:\test); dir File /s (查找文件，如 dir c:\ *23.txt /s，使下载更智能。查找比较耗时，稍加等待即可) …</li>
</ol>
<p><img src="http://ouzjv2e18.bkt.clouddn.com/IMG_0994_small.png" alt="tip1"><br><img src="http://ouzjv2e18.bkt.clouddn.com/IMG_0995_small.png" alt="tip2"></p>
<blockquote>
<p>最后祝你，身体健康，再见！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;古之为英雄豪杰者，不过面厚心黑而已。&lt;br&gt;　　　　　　　　　　　　　　　- 李宗吾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近因为要做微信版的智能客服系统，所以看了看有关wechat的api，发现了一个很好的python库&lt;a href=&quot;http://itchat.readthedocs.io/zh/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;itchat&lt;/a&gt;，于是乎想用它做一些好玩的有用的程序。想到最近挂机跑深度学习模型的痛楚，遂决定做一个微信版的remote-CMD，可以用手机微信远程监控电脑运行状态（截屏），同时可以远程通过命令提示符操作PC，实现远程运行程序、搜索电脑文件并下载到手机等“炫酷”的功能，先上代码吧！&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://houjiateng.com/tags/python/"/>
    
      <category term="wechat" scheme="http://houjiateng.com/tags/wechat/"/>
    
      <category term="itchat" scheme="http://houjiateng.com/tags/itchat/"/>
    
  </entry>
  
  <entry>
    <title>随记2</title>
    <link href="http://houjiateng.com/2017/09/22/%E9%9A%8F%E8%AE%B02/"/>
    <id>http://houjiateng.com/2017/09/22/随记2/</id>
    <published>2017-09-22T08:52:35.000Z</published>
    <updated>2017-09-22T11:02:55.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>珍惜往事的人也一定有一颗温柔爱人的心。<br>当我们的亲人远行或故世之后，我们会不由自主地百般追念他们的好处，悔恨自己的疏忽和过错。然而，事实上，即使尚未生离死别，我们所爱的人何尝不是时时刻刻离我们而去呢？<br>浩渺宇宙间，任何一个生灵的降生都是偶然的，离去却是必然的；一个生灵与另一个生灵的相遇总是千载一瞬，分别却是万劫不复。说到底，谁和谁不同是这空空世界里的天涯论落人？<br>在平凡的日常生活中，你已经习惯了和你所爱的人的相处，仿佛日子会这样无限延续下去。忽然有一天，你心头一凉，想起时光在飞快流逝，正无可挽回地把你、你所爱的人以及你们共同拥有的一切带走。于是，你心中升起一股柔情，想要保护你的爱人免遭时光劫掠。你还深切感到，平凡生活中这些简单的幸福也是多么宝贵，有着稍纵即逝的惊人的美…<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　-周国平</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;珍惜往事的人也一定有一颗温柔爱人的心。&lt;br&gt;当我们的亲人远行或故世之后，我们会不由自主地百般追念他们的好处，悔恨自己的疏忽和过错。然而，事实上，即使尚未生离死别，我们所爱的人何尝不是时时刻刻离我们而去呢？&lt;br&gt;浩渺宇宙间，任何一个生灵的降生都是
    
    </summary>
    
      <category term="其他" scheme="http://houjiateng.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="散文" scheme="http://houjiateng.com/tags/%E6%95%A3%E6%96%87/"/>
    
      <category term="周国平" scheme="http://houjiateng.com/tags/%E5%91%A8%E5%9B%BD%E5%B9%B3/"/>
    
  </entry>
  
  <entry>
    <title>随记</title>
    <link href="http://houjiateng.com/2017/09/13/%E9%9A%8F%E8%AE%B0/"/>
    <id>http://houjiateng.com/2017/09/13/随记/</id>
    <published>2017-09-13T08:52:35.000Z</published>
    <updated>2017-11-03T07:52:18.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>越是气场平和、心性温柔的人，越不爱和别人太密切地交往，生怕哪里辜负了对方的期待，同时也绝少期待他人。于是在一般社会看来，反而像是比较冷淡的人。</p>
</blockquote>
<p>今天在逛我爱自然语言处理博客时，看到了一系列很好的文章，叫做<a href="http://www.52nlp.cn/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E4%B8%80" target="_blank" rel="external">《正态分布的前世今生》</a>，共8篇，来自<a href="http://www.52nlp.cn/author/rickjin" target="_blank" rel="external">RICKJIN</a>。我特别喜欢这样深入浅出，娓娓而谈的文章，特地来记录分享下。<br>另外推荐一本由C.R.Rao写的<a href="https://book.douban.com/subject/1238685/" target="_blank" rel="external">统计与真理-怎样运用偶然性</a>，我觉得这种类型的文章书籍不受大众欢迎很难吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;越是气场平和、心性温柔的人，越不爱和别人太密切地交往，生怕哪里辜负了对方的期待，同时也绝少期待他人。于是在一般社会看来，反而像是比较冷淡的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天在逛我爱自然语言处理博客时，看到了一系列很好的文章，叫做&lt;
    
    </summary>
    
      <category term="其他" scheme="http://houjiateng.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="统计" scheme="http://houjiateng.com/tags/%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="正态分布" scheme="http://houjiateng.com/tags/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>利用python requests帮你选课（国科大教务系统）</title>
    <link href="http://houjiateng.com/2017/09/09/%E5%88%A9%E7%94%A8python%20requests%E5%B8%AE%E4%BD%A0%E9%80%89%E8%AF%BE%EF%BC%88%E5%9B%BD%E7%A7%91%E5%A4%A7%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
    <id>http://houjiateng.com/2017/09/09/利用python requests帮你选课（国科大教务系统）/</id>
    <published>2017-09-09T09:52:35.000Z</published>
    <updated>2017-09-09T11:09:26.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记得以前有一个笑话，说让本科，硕士和博士分别炒一盘回锅肉。<br>本科生找了一张菜谱，买了需要的食材和酱料，照着菜谱炒出来了；<br>硕士生找了一些菜谱，进行了调研并且比较了不同菜谱的区别，选择了几个食材供应商进行对比，最后炒出了回锅肉并写了一篇炒回锅肉的报告；<br>博士生回去进行了大量的调研，历时半年提交了一份一百多页的论文。翻开论文目录的第一章写着：如何养猪。<br>　　　　　　　　　　　　　　　　　　　　　　　　　-<a href="https://www.zhihu.com/question/24963114" target="_blank" rel="external">李飞白</a>　　</p>
</blockquote>
<a id="more"></a> 
<p>我想大家都遇到过这样的事吧：每当到了学期初选课的时候，校园网就瘫痪掉，等你费劲千辛万苦再次能进入选课系统时，想选的、限选的课都已经被抢光了。我这里提供一个方法，利用python requests库，帮你秒选课程。即使课程人数已经到了上限，也可以挂着程序一直运行，有人退课了你便会第一时间抢上。直接上代码吧！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">conn=requests.session() <span class="comment">#创建session，传递cookie</span></div><div class="line">del_flag=<span class="number">0</span> <span class="comment">#删除课程flag</span></div><div class="line">add_flag=<span class="number">1</span> <span class="comment">#新增课程flag</span></div><div class="line"></div><div class="line"><span class="comment">#登录</span></div><div class="line"><span class="keyword">print</span> (<span class="string">'登录中...'</span>)</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">#第一种登录方式</span></div><div class="line"><span class="string">url='http://onestop.ucas.ac.cn/Ajax/Login/0'</span></div><div class="line"><span class="string">data=&#123;</span></div><div class="line"><span class="string">    'username':'xxx@xxx', #登录邮箱</span></div><div class="line"><span class="string">    'password':'xxxxxx',  #登录密码</span></div><div class="line"><span class="string">    'remember':'checked'</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">headers=&#123;</span></div><div class="line"><span class="string">    'Accept':'*/*',</span></div><div class="line"><span class="string">    'Accept-Encoding':'gzip, deflate',</span></div><div class="line"><span class="string">    'Accept-Language':'zh-CN,zh;q=0.8',</span></div><div class="line"><span class="string">    'Connection':'keep-alive',</span></div><div class="line"><span class="string">    'Content-Length':'64',</span></div><div class="line"><span class="string">    'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8',</span></div><div class="line"><span class="string">    'Host':'onestop.ucas.ac.cn',</span></div><div class="line"><span class="string">    'rigin':'http://onestop.ucas.ac.cn',</span></div><div class="line"><span class="string">    'Referer':'http://onestop.ucas.ac.cn/home/index',</span></div><div class="line"><span class="string">    'User-Agent':'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36',</span></div><div class="line"><span class="string">    'X-Requested-With':'XMLHttpRequest'</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">resp=conn.post(url=url,headers=headers,data=data)</span></div><div class="line"><span class="string">print ('登陆完成！')</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#进入选课系统</span></div><div class="line"><span class="string">print ('进入选课系统...')</span></div><div class="line"><span class="string">url=json.loads(resp.text)['msg']</span></div><div class="line"><span class="string">resp=conn.get(url=url)</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="comment">#第二种登录方式</span></div><div class="line">url=<span class="string">'http://sep.ucas.ac.cn/slogin'</span></div><div class="line">headers=&#123;</div><div class="line">    <span class="string">'Accept'</span>:<span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>:<span class="string">'gzip, deflate'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8'</span>,</div><div class="line">    <span class="string">'Cache-Control'</span>:<span class="string">'max-age=0'</span>,</div><div class="line">    <span class="string">'Connection'</span>:<span class="string">'keep-alive'</span>,</div><div class="line">    <span class="string">'Content-Length'</span>:<span class="string">'61'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">    <span class="string">'Host'</span>:<span class="string">'sep.ucas.ac.cn'</span>,</div><div class="line">    <span class="string">'Origin'</span>:<span class="string">'http://sep.ucas.ac.cn'</span>,</div><div class="line">    <span class="string">'Referer'</span>:<span class="string">'http://sep.ucas.ac.cn/'</span>,</div><div class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>:<span class="string">'1'</span>,</div><div class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line">data=&#123;</div><div class="line">    <span class="string">'userName'</span>:<span class="string">'xxx@xxx'</span>, <span class="comment">#登录邮箱</span></div><div class="line">    <span class="string">'pwd'</span>:<span class="string">'xxxxxx'</span>,       <span class="comment">#登录密码</span></div><div class="line">    <span class="string">'sb'</span>:<span class="string">'sb'</span></div><div class="line">&#125;</div><div class="line">resp=conn.post(url=url,headers=headers,data=data)</div><div class="line"></div><div class="line"><span class="comment">#准备进入选课系统</span></div><div class="line">url=<span class="string">'http://sep.ucas.ac.cn/portal/site/226/821'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'window.location.href=\'(.+?)\''</span></div><div class="line">url_reg=re.compile(reg)</div><div class="line">url_list=url_reg.findall(resp.text)</div><div class="line">url=url_list[<span class="number">0</span>]</div><div class="line">resp=conn.get(url=url) <span class="comment">#访问重定向的网址 进入选课系统</span></div><div class="line"></div><div class="line"><span class="comment">#进入选择课程界面 获得query_string_paras</span></div><div class="line">url=<span class="string">'http://jwxk.ucas.ac.cn/courseManage/main'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'\"?s=(.+?)\";'</span></div><div class="line">url_reg=re.compile(reg)</div><div class="line">query_list=url_reg.findall(resp.text)</div><div class="line">query_string_paras=query_list[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment">#退课</span></div><div class="line"><span class="keyword">if</span> del_flag:</div><div class="line">    course_list=[   <span class="comment">#构造要删除的课程号列表</span></div><div class="line">        <span class="number">136034</span></div><div class="line">        <span class="number">136064</span></div><div class="line">    ]</div><div class="line">    count=<span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        print(<span class="string">'=====================Round '</span>+str(count)+<span class="string">'========================='</span>)</div><div class="line">        count=count+<span class="number">1</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> course_list:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'课程全部退课成功！'</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> course_list:</div><div class="line">            url_del=<span class="string">'http://jwxk.ucas.ac.cn/courseManage/del/'</span>+str(i)+<span class="string">'?s='</span>+query_string_paras</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                resp=conn.get(url=url_del,timeout=<span class="number">3</span>)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            success_reg=re.compile(<span class="string">u'成功'</span>)</div><div class="line">            <span class="keyword">if</span> success_reg.search(resp.text):</div><div class="line">                course_list.remove(i)    <span class="comment">#从列表中删除这一门课</span></div><div class="line">                <span class="keyword">print</span> (str(i)+<span class="string">' 退课成功！'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> (str(i)+<span class="string">' 退课失败！'</span>)</div><div class="line"></div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">#选课</span></div><div class="line"><span class="keyword">if</span> add_flag:</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    需要手动构造data：</span></div><div class="line"><span class="string">    1.deptIds为学院id，即你要选的课程属于哪个学院</span></div><div class="line"><span class="string">    01-数学：910</span></div><div class="line"><span class="string">    02-物理：911</span></div><div class="line"><span class="string">    03-天文：957</span></div><div class="line"><span class="string">    04-化学：912</span></div><div class="line"><span class="string">    05-材料：928</span></div><div class="line"><span class="string">    06-生命：913</span></div><div class="line"><span class="string">    07-地球：914</span></div><div class="line"><span class="string">    08-资环：921</span></div><div class="line"><span class="string">    09-计算机：951</span></div><div class="line"><span class="string">    10-电子：952</span></div><div class="line"><span class="string">    11-工程：958</span></div><div class="line"><span class="string">    12-经管：917</span></div><div class="line"><span class="string">    13-公共管理：945</span></div><div class="line"><span class="string">    14-人文：927</span></div><div class="line"><span class="string">    15-外语：915</span></div><div class="line"><span class="string">    16-中丹：954</span></div><div class="line"><span class="string">    17-国际：955</span></div><div class="line"><span class="string">    18-存济：959</span></div><div class="line"><span class="string">    19-微电子：961</span></div><div class="line"><span class="string">    20-网络空间安全：963</span></div><div class="line"><span class="string">    21-未来技术：962</span></div><div class="line"><span class="string">    22-创新创业：？</span></div><div class="line"><span class="string">    23-马克思：964</span></div><div class="line"><span class="string">    24-心理学：968</span></div><div class="line"><span class="string">    25-人工智能：969</span></div><div class="line"><span class="string">    26-纳米：970</span></div><div class="line"><span class="string">    27-艺术：971</span></div><div class="line"><span class="string">    TY-体育：946</span></div><div class="line"><span class="string">    2.sids为课程id，获得方式可以点击该课程，网址后面的6位数字即为课程id</span></div><div class="line"><span class="string">    3.加入did_xxxxxx:xxxxxx字段, 代表xxxxxx课程选为学位课</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    data_list=[</div><div class="line"></div><div class="line">        &#123;<span class="string">'deptIds'</span>:<span class="string">'952'</span>,<span class="string">'sids'</span>:<span class="string">'136055'</span>,<span class="string">'did_136055'</span>:<span class="string">'136055'</span>&#125;,<span class="comment">#随机过程 学位课       </span></div><div class="line">        &#123;<span class="string">'deptIds'</span>:<span class="string">'969'</span>,<span class="string">'sids'</span>:<span class="string">'138246'</span>&#125; <span class="comment">#模式识别 </span></div><div class="line">    ]</div><div class="line">    url=<span class="string">'http://jwxk.ucas.ac.cn/courseManage/saveCourse?s='</span>+query_string_paras</div><div class="line"></div><div class="line">    flag_dict=&#123;data[<span class="string">'sids'</span>]:<span class="number">0</span> <span class="keyword">for</span> data <span class="keyword">in</span> data_list&#125; <span class="comment">#0代表未选上</span></div><div class="line">    count=<span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        print(<span class="string">'=====================Round '</span>+str(count)+<span class="string">'========================='</span>)</div><div class="line">        count=count+<span class="number">1</span></div><div class="line">        <span class="comment">#判断是否都选成功了</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        flag=1</span></div><div class="line"><span class="string">        for i in flag_dict.values():</span></div><div class="line"><span class="string">            flag=flag*i</span></div><div class="line"><span class="string">        if flag==1:</span></div><div class="line"><span class="string">            break</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data_list:   <span class="comment">#选课列表为空代表都选成功</span></div><div class="line">            <span class="keyword">print</span> flag_dict <span class="comment">#打印出flags验证</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="comment">#选课</span></div><div class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                resp=conn.post(url=url,data=data,timeout=<span class="number">3</span>)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">            error_reg=re.compile(<span class="string">u'冲突'</span>)</div><div class="line">            success_reg=re.compile(<span class="string">u'成功'</span>)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> success_reg.search(resp.text):</div><div class="line">                flag_dict[data[<span class="string">'sids'</span>]]=<span class="number">1</span> <span class="comment">#将这一门课的flag置1</span></div><div class="line">                data_list.remove(data)    <span class="comment">#从列表中删除这一门课</span></div><div class="line">                <span class="keyword">print</span> (data[<span class="string">'sids'</span>]+<span class="string">' 选课成功！'</span>)</div><div class="line"></div><div class="line">            <span class="keyword">elif</span> error_reg.search(resp.text):</div><div class="line">                conflict_reg=re.compile(<span class="string">u'课程名称为(.+?)，'</span>)</div><div class="line">                conflict=conflict_reg.findall(resp.text)</div><div class="line">                conflict_course=conflict[<span class="number">0</span>]</div><div class="line">                <span class="keyword">print</span> (conflict_course.encode(<span class="string">'utf-8'</span>)+<span class="string">'，选课失败！'</span>)</div><div class="line"></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> (data[<span class="string">'sids'</span>]+<span class="string">' 课程已选满，选课失败！等待退选...'</span>)</div><div class="line"></div><div class="line">        time.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>选课前提前几分钟运行程序即可，有可能有惊喜哦。另外本程序仅供学习使用，如果对教务系统造成不好的影响，我会及时撤稿。</p>
<p>最后打个广告，国科大同学关注下面的公众号，可以查询课程上课时间地点、校车余票等等，方便快捷！<br><img src="http://ouzjv2e18.bkt.clouddn.com/yujianguokeda.jpg" alt="遇见国科大"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记得以前有一个笑话，说让本科，硕士和博士分别炒一盘回锅肉。&lt;br&gt;本科生找了一张菜谱，买了需要的食材和酱料，照着菜谱炒出来了；&lt;br&gt;硕士生找了一些菜谱，进行了调研并且比较了不同菜谱的区别，选择了几个食材供应商进行对比，最后炒出了回锅肉并写了一篇炒回锅肉的报告；&lt;br&gt;博士生回去进行了大量的调研，历时半年提交了一份一百多页的论文。翻开论文目录的第一章写着：如何养猪。&lt;br&gt;　　　　　　　　　　　　　　　　　　　　　　　　　-&lt;a href=&quot;https://www.zhihu.com/question/24963114&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;李飞白&lt;/a&gt;　　&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="requests" scheme="http://houjiateng.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>利用python requests和bs4遍历下载某网站所有写真集</title>
    <link href="http://houjiateng.com/2017/09/04/%E5%88%A9%E7%94%A8python%20requests%E5%92%8Cbs4%E9%81%8D%E5%8E%86%E4%B8%8B%E8%BD%BD%E6%9F%90%E7%BD%91%E7%AB%99%E6%89%80%E6%9C%89%E5%86%99%E7%9C%9F%E9%9B%86/"/>
    <id>http://houjiateng.com/2017/09/04/利用python requests和bs4遍历下载某网站所有写真集/</id>
    <published>2017-09-04T08:52:35.000Z</published>
    <updated>2017-09-05T09:09:26.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>A thing of beauty is a joy forever.<br>　　　　　　　　　　　　　　- John Keats</p>
</blockquote>
<p>有研究表明，学习科研之余看看美女图片，有助于效率的提升。现在市面上有好多优质的写真集，比如推女郎、尤果网等等，这里我提供一个方法，利用python把所有优质写真集的所有期图片都下载下来。主要利用了requests和bs4这两个库：requests负责连接网络，处理http协议；bs4负责将网页变成结构化数据，方便爬取。下面我就直接贴代码了。python2.7可以成功运行。</p>
<a id="more"></a> 
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获取不同杂志的入口网址列表</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_area_list</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    raw_list=soup.findAll(<span class="string">'dt'</span>)</div><div class="line">    area_list=[]</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> raw_list:</div><div class="line">        <span class="keyword">if</span> item.find(<span class="string">'a'</span>):</div><div class="line">            area_list.append(item.find(<span class="string">'a'</span>).get(<span class="string">'href'</span>))</div><div class="line">    <span class="keyword">return</span> area_list</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获取某一杂志的网页总页数</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_num</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'span'</span>)</div><div class="line">    page=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'title'</span>):</div><div class="line">            ss = item.get(<span class="string">'title'</span>)</div><div class="line">            reg= re.compile(<span class="string">u'共(.+?)页'</span>)</div><div class="line">            <span class="keyword">if</span> reg.findall(ss):</div><div class="line">                page=int(reg.findall(ss)[<span class="number">0</span>].encode(<span class="string">'utf8'</span>).strip())</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> page</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">为了获得页数，必须访问非图片模式网址</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_noPicMode</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'a'</span>)</div><div class="line">    url_noPicMode=<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'class'</span>):</div><div class="line">            <span class="keyword">if</span> item.get(<span class="string">'class'</span>)==[<span class="string">'chked'</span>]:</div><div class="line">                url_noPicMode= item.get(<span class="string">'href'</span>)</div><div class="line">    <span class="keyword">return</span> url_noPicMode</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获得某一页所有写真集网址列表</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_album_list</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'a'</span>)</div><div class="line">    album_list=[]</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'onclick'</span>):</div><div class="line">            <span class="keyword">if</span> item.get(<span class="string">'onclick'</span>)==<span class="string">'atarget(this)'</span>:</div><div class="line">                album_list.append(item.get(<span class="string">'href'</span>))</div><div class="line">    <span class="keyword">return</span> album_list</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">获得某一写真集所有图片的网址列表和该写真集名字</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pic_list</span><span class="params">(url)</span>:</span></div><div class="line">    resp=conn.get(url=url,timeout=<span class="number">5</span>)</div><div class="line">    soup=BeautifulSoup(resp.content)</div><div class="line">    _list=soup.findAll(<span class="string">'img'</span>)</div><div class="line">    pic_list=[]</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'file'</span>):</div><div class="line">            pic_list.append(item.get(<span class="string">'file'</span>))</div><div class="line">    _list=soup.findAll(<span class="string">'span'</span>)</div><div class="line">    album_name=<span class="string">'others'</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> _list:</div><div class="line">        <span class="keyword">if</span> item.has_attr(<span class="string">'id'</span>):</div><div class="line">            <span class="keyword">if</span> item.get(<span class="string">'id'</span>)==<span class="string">'thread_subject'</span>:</div><div class="line">                album_name = item.string</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> pic_list,album_name</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">下载并保存图片</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_pic</span><span class="params">(url,album_name,pic_num,local_path,fl)</span>:</span></div><div class="line">    count=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=count+<span class="number">1</span></div><div class="line">        <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">            time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">            fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">            fl.flush()</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            resp = conn.get(url, stream=<span class="keyword">True</span>,timeout=<span class="number">5</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> resp.status_code==<span class="number">200</span>:</div><div class="line">            s =album_name.encode(<span class="string">'utf-8'</span>).replace(<span class="string">'/'</span>,<span class="string">' '</span>).decode(<span class="string">'utf-8'</span>)</div><div class="line">            <span class="keyword">with</span> open(local_path+s+<span class="string">'/'</span>+str(pic_num)+<span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> resp.iter_content(chunk_size=<span class="number">1024</span>):</div><div class="line">                    <span class="keyword">if</span> chunk:</div><div class="line">                        f.write(chunk)</div><div class="line">                        f.flush()</div><div class="line">                f.close()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">        fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Download-uncompleted'</span>+<span class="string">'\n'</span>)</div><div class="line">        fl.flush()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> count</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">主程序流程:</span></div><div class="line"><span class="string">    获得不同杂志的入口网址列表 -&gt; </span></div><div class="line"><span class="string">    判断某一杂志的入口网址是否为无图模式，从而获得该杂志的网页总页数 -&gt;</span></div><div class="line"><span class="string">    获得某一杂志某一页的所有写真集入口网址列表 -&gt;</span></div><div class="line"><span class="string">    获得某一写真集所有图片的网址列表和该写真集名字 -&gt;</span></div><div class="line"><span class="string">    如果本地未存在该写真集，下载。</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    local_path=<span class="string">'c:/Users/mondon/Desktop/test_mv/'</span> <span class="comment">#自定义保存路径</span></div><div class="line">    url_base=<span class="string">'https://www.aisinei.com/'</span> <span class="comment">#网站基址</span></div><div class="line">    log=<span class="string">'error_log.txt'</span> <span class="comment">#记录访问时抛错的网址</span></div><div class="line"></div><div class="line">    conn=requests.session() <span class="comment">#创建session 传递cookie</span></div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(local_path+log,<span class="string">'a'</span>) <span class="keyword">as</span> fl:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        url_list=[]</div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=count+<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                fl.write(time_now+<span class="string">' : '</span>+url_base+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                fl.flush()</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                url_list=get_area_list(url_base) <span class="comment">#获得不同杂志的入口网址列表</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(url_list)):</div><div class="line">            count=<span class="number">0</span></div><div class="line">            url=<span class="string">''</span></div><div class="line">            <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                count=count+<span class="number">1</span></div><div class="line">                <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                    time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                    fl.write(time_now+<span class="string">' : '</span>+url_list[i]+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                    fl.flush()</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">try</span>: <span class="comment">#获得无图模式网址，为下面获得总页数做准备</span></div><div class="line">                    <span class="keyword">if</span> get_noPicMode(url_list[i]):</div><div class="line">                        url=get_noPicMode(url_list[i])</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        url=url_list[i]</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">            page=<span class="number">0</span></div><div class="line">            <span class="keyword">if</span> url:</div><div class="line">                count=<span class="number">0</span></div><div class="line">                <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                    count=count+<span class="number">1</span></div><div class="line">                    <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                        time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                        fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                        fl.flush()</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        page=get_page_num(url) <span class="comment">#获得某一杂志的总网页数</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">except</span>:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(page):</div><div class="line">                url=url_list[i].replace(<span class="string">'1'</span>,str(j+<span class="number">1</span>))</div><div class="line">                count=<span class="number">0</span></div><div class="line">                url_list_1=[]</div><div class="line">                <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                    count=count+<span class="number">1</span></div><div class="line">                    <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                        time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                        fl.write(time_now+<span class="string">' : '</span>+url+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                        fl.flush()</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        url_list_1=get_album_list(url) <span class="comment">#获得某一网页的写真集网址列表</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">except</span>:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line"></div><div class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(url_list_1)):</div><div class="line">                    count=<span class="number">0</span></div><div class="line">                    url_list_2=[]</div><div class="line">                    album_name=<span class="string">''</span></div><div class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">                        count=count+<span class="number">1</span></div><div class="line">                        <span class="keyword">if</span> count&gt;<span class="number">10</span>:</div><div class="line">                            time_now=time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">                            fl.write(time_now+<span class="string">' : '</span>+url_list_1[k]+<span class="string">' $Connect-error'</span>+<span class="string">'\n'</span>)</div><div class="line">                            fl.flush()</div><div class="line">                            <span class="keyword">break</span></div><div class="line">                        <span class="keyword">try</span>:</div><div class="line">                            url_list_2,album_name=get_pic_list(url_list_1[k]) <span class="comment">#获得该写真集的所有图片地址和写真集名字</span></div><div class="line">                            <span class="keyword">break</span></div><div class="line">                        <span class="keyword">except</span>:</div><div class="line">                            <span class="keyword">continue</span></div><div class="line">                    <span class="keyword">if</span> album_name: <span class="comment">#若本地不存在该写真集，则创建文件夹准备存储</span></div><div class="line">                        <span class="keyword">print</span> <span class="string">'准备下载: '</span>+album_name.encode(<span class="string">'utf-8'</span>)</div><div class="line">                        s =album_name.encode(<span class="string">'utf-8'</span>).replace(<span class="string">'/'</span>,<span class="string">' '</span>).decode(<span class="string">'utf-8'</span>)</div><div class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(local_path+s):</div><div class="line">                            os.makedirs(local_path+s)</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            <span class="keyword">print</span> <span class="string">' '</span>+album_name.encode(<span class="string">'utf-8'</span>)+<span class="string">' 已存在'</span></div><div class="line">                            <span class="keyword">continue</span></div><div class="line"></div><div class="line">                    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>,len(url_list_2),<span class="number">4</span>): <span class="comment">#四线程下载图片</span></div><div class="line">                        threads = []</div><div class="line">                        t1 = threading.Thread(target=download_pic,args=(url_list_2[m],album_name,m+<span class="number">1</span>,local_path,fl))</div><div class="line">                        threads.append(t1)</div><div class="line">                        <span class="keyword">if</span> m+<span class="number">1</span>&lt;len(url_list_2):</div><div class="line">                            t2 = threading.Thread(target=download_pic,args=(url_list_2[m+<span class="number">1</span>],album_name,m+<span class="number">2</span>,local_path,fl))</div><div class="line">                            threads.append(t2)</div><div class="line">                            <span class="keyword">if</span> m+<span class="number">2</span>&lt;len(url_list_2):</div><div class="line">                                t3 = threading.Thread(target=download_pic,args=(url_list_2[m+<span class="number">2</span>],album_name,m+<span class="number">3</span>,local_path,fl))</div><div class="line">                                threads.append(t3)</div><div class="line">                                <span class="keyword">if</span> m+<span class="number">3</span>&lt;len(url_list_2):</div><div class="line">                                    t4 = threading.Thread(target=download_pic,args=(url_list_2[m+<span class="number">3</span>],album_name,m+<span class="number">4</span>,local_path,fl))</div><div class="line">                                    threads.append(t4)</div><div class="line">                        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">                            t.setDaemon(<span class="keyword">True</span>)</div><div class="line">                            t.start()</div><div class="line">                        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">                            t.join(<span class="number">30</span>) <span class="comment">#30s超时时间</span></div><div class="line">                        <span class="keyword">print</span> m+<span class="number">1</span></div><div class="line"></div><div class="line">        fl.close()</div></pre></td></tr></table></figure>
<p><img src="http://ouzjv2e18.bkt.clouddn.com/meinvlist.png" alt="meinvlist.png"><br>如有侵权，请及时联系我，我会撤稿。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;A thing of beauty is a joy forever.&lt;br&gt;　　　　　　　　　　　　　　- John Keats&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有研究表明，学习科研之余看看美女图片，有助于效率的提升。现在市面上有好多优质的写真集，比如推女郎、尤果网等等，这里我提供一个方法，利用python把所有优质写真集的所有期图片都下载下来。主要利用了requests和bs4这两个库：requests负责连接网络，处理http协议；bs4负责将网页变成结构化数据，方便爬取。下面我就直接贴代码了。python2.7可以成功运行。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="requests" scheme="http://houjiateng.com/tags/requests/"/>
    
      <category term="bs4" scheme="http://houjiateng.com/tags/bs4/"/>
    
      <category term="beautifulsoup" scheme="http://houjiateng.com/tags/beautifulsoup/"/>
    
  </entry>
  
  <entry>
    <title>利用python requests帮你评教（国科大教务系统）</title>
    <link href="http://houjiateng.com/2017/08/29/%E5%88%A9%E7%94%A8python%20requests%E5%B8%AE%E4%BD%A0%E8%AF%84%E6%95%99%EF%BC%88%E5%9B%BD%E7%A7%91%E5%A4%A7%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
    <id>http://houjiateng.com/2017/08/29/利用python requests帮你评教（国科大教务系统）/</id>
    <published>2017-08-29T09:52:35.000Z</published>
    <updated>2017-08-29T10:00:05.159Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Talk is cheap, show me the code.<br> 　　　　　　　　　　　　　　　　　　-Linus Torvalds</p>
</blockquote>
<p>在国科大，如果你错过了评教，就看不到该课程的成绩，是不是很烦。我这里提供一个方法，即使你错过了评教时间，也能评教然后看到成绩。主要利用python的requests库，python2 和 python3 都测试成功。直接上代码吧!</p>
<a id="more"></a> 
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment">#创建session，传递cookie</span></div><div class="line">conn=requests.session()</div><div class="line"></div><div class="line"><span class="comment">#登录</span></div><div class="line"><span class="keyword">print</span> (<span class="string">'登录中...'</span>)</div><div class="line">url=<span class="string">'http://onestop.ucas.ac.cn/Ajax/Login/0'</span></div><div class="line">data=&#123;</div><div class="line">    <span class="string">'username'</span>:<span class="string">'xxx@xxx'</span>, <span class="comment">#你的登录邮箱</span></div><div class="line">    <span class="string">'password'</span>:<span class="string">'xxxxxx'</span>,  <span class="comment">#你的密码</span></div><div class="line">    <span class="string">'remember'</span>:<span class="string">'checked'</span></div><div class="line">&#125;</div><div class="line">headers=&#123;</div><div class="line">    <span class="string">'Accept'</span>:<span class="string">'*/*'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>:<span class="string">'gzip, deflate'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8'</span>,</div><div class="line">    <span class="string">'Connection'</span>:<span class="string">'keep-alive'</span>,</div><div class="line">    <span class="string">'Content-Length'</span>:<span class="string">'64'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</div><div class="line">    <span class="string">'Host'</span>:<span class="string">'onestop.ucas.ac.cn'</span>,</div><div class="line">    <span class="string">'rigin'</span>:<span class="string">'http://onestop.ucas.ac.cn'</span>,</div><div class="line">    <span class="string">'Referer'</span>:<span class="string">'http://onestop.ucas.ac.cn/home/index'</span>,</div><div class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'</span>,</div><div class="line">    <span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span></div><div class="line">&#125;</div><div class="line">resp=conn.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (<span class="string">'登陆完成！'</span>)</div><div class="line"></div><div class="line"><span class="comment">#进入选课系统</span></div><div class="line"><span class="keyword">print</span> (<span class="string">'进入评教系统...'</span>)</div><div class="line">url=json.loads(resp.text)[<span class="string">'msg'</span>]</div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">url=<span class="string">'http://sep.ucas.ac.cn/portal/site/226/821'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'window.location.href=\'(.+?)\''</span></div><div class="line">url_reg=re.compile(reg)</div><div class="line">url_list=url_reg.findall(resp.text)</div><div class="line">url=url_list[<span class="number">0</span>]</div><div class="line">resp=conn.get(url=url) <span class="comment">#访问重定向的网址 进入选课系统</span></div><div class="line"></div><div class="line"><span class="comment">#进入选择课程界面 获得query_string_paras</span></div><div class="line">url=<span class="string">'http://jwxk.ucas.ac.cn/courseManage/main'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'\"?s=(.+?)\";'</span></div><div class="line">url_reg=re.compile(reg)</div><div class="line">query_list=url_reg.findall(resp.text)</div><div class="line">query_string_paras=query_list[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment">#获取所选课程id号</span></div><div class="line">url=<span class="string">'http://jwxk.ucas.ac.cn/courseManage/selectedCourse'</span></div><div class="line">resp=conn.get(url=url)</div><div class="line"></div><div class="line">reg=<span class="string">r'courseplan/+(.+?)\"'</span></div><div class="line">course_reg=re.compile(reg)</div><div class="line">course_list=course_reg.findall(resp.text)</div><div class="line"></div><div class="line"><span class="comment">#评教</span></div><div class="line"><span class="keyword">print</span> (<span class="string">'评教中,请耐心等待...'</span>)</div><div class="line">comment=&#123;</div><div class="line">    <span class="string">'1'</span>:<span class="string">'老师认真负责，作业布置的也十分合理，一学期下来收获很多'</span>,</div><div class="line">    <span class="string">'2'</span>:<span class="string">'老师讲的好，同学们听得都很认真，作业量也适中，希望老师继续保持下去'</span>,</div><div class="line">    <span class="string">'3'</span>:<span class="string">'老师的课讲得好，作业布置的合理，好好学能有很大收获'</span></div><div class="line">    &#125;</div><div class="line">data=&#123;str(x):<span class="string">'900'</span> <span class="keyword">for</span> x <span class="keyword">in</span> np.arange(<span class="number">900</span>)&#125;</div><div class="line">data_other=&#123;</div><div class="line">    <span class="comment">#5星 和 评价</span></div><div class="line">    <span class="string">'starFlag'</span>:<span class="string">'5'</span>,</div><div class="line">    <span class="string">'flaw'</span>:<span class="string">''</span>,</div><div class="line">    <span class="string">'suggest'</span>:<span class="string">''</span></div><div class="line">&#125;</div><div class="line">data.update(data_other)</div><div class="line"><span class="keyword">for</span> course <span class="keyword">in</span> course_list:</div><div class="line">    url=<span class="string">'http://jwxk.ucas.ac.cn/evaluate/save/'</span>+course+<span class="string">'?s='</span>+query_string_paras</div><div class="line">    data_merit=&#123;<span class="string">'merit'</span>:comment[random.choice([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>])]&#125;</div><div class="line">    data_new=data.copy()</div><div class="line">    data_new.update(data_merit)</div><div class="line">    resp=conn.post(url=url,data=data_new)</div><div class="line"><span class="keyword">print</span> (<span class="string">'评教完成！'</span>)</div></pre></td></tr></table></figure>
<p>本程序仅供学习使用，如对教务系统造成影响，我会撤稿。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Talk is cheap, show me the code.&lt;br&gt; 　　　　　　　　　　　　　　　　　　-Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在国科大，如果你错过了评教，就看不到该课程的成绩，是不是很烦。我这里提供一个方法，即使你错过了评教时间，也能评教然后看到成绩。主要利用python的requests库，python2 和 python3 都测试成功。直接上代码吧!&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="requests" scheme="http://houjiateng.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>使用Flask为对答机器人写个RESTful API</title>
    <link href="http://houjiateng.com/2017/08/22/%E4%BD%BF%E7%94%A8Flask%E4%B8%BA%E5%AF%B9%E7%AD%94%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%86%99%E4%B8%AARESTful%20API%20/"/>
    <id>http://houjiateng.com/2017/08/22/使用Flask为对答机器人写个RESTful API /</id>
    <published>2017-08-22T08:52:35.000Z</published>
    <updated>2017-08-24T03:28:35.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>During his own Google interview, Jeff Dean was asked the  implications if P=NP were true.  He said, “P = 0 or N = 1.” Then, before  the interviewer had even finished laughing, Jeff examined Google’s  public certificate and wrote the private key on the whiteboard. LOL</p>
</blockquote>
<p>上一篇文章讲了基于Tensorflow seq2seq 的对答机器人在阿里云上的部署（Flask+Nginx+Gunicorn），这里打算动手写个简单的RESTful API ，方便大家调用。因为我是个刚入门web开发的新手，所以这篇文章算是一个对实践的小小总结吧。</p>
<a id="more"></a> 
<h1 id="RESTful-API-简介"><a href="#RESTful-API-简介" class="headerlink" title="RESTful API 简介"></a>RESTful API 简介</h1><p><a href="https://www.zhihu.com/question/28557115/answer/48094438" target="_blank" rel="external">这里</a>有个关于RESTful API的通俗易懂的解释，写的很好，我就简单引用其中一段话吧：</p>
<blockquote>
<p>大家都知道”古代”网页是前端后端融在一起的，比如之前的PHP，JSP等。在之前的桌面时代问题不大，但是近年来移动互联网的发展，各种类型的Client层出不穷，RESTful可以通过一套统一的接口为 Web，iOS和Android提供服务。另外对于广大平台来说，比如Facebook platform，微博开放平台，微信公共平台等，它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful更是它们最好的选择。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　-覃超</p>
</blockquote>
<p><img src="http://ouzjv2e18.bkt.clouddn.com/restful%20API.jpg" alt="RESTful API.jpg"></p>
<h1 id="Flask实现RESTful-API"><a href="#Flask实现RESTful-API" class="headerlink" title="Flask实现RESTful API"></a>Flask实现RESTful API</h1><p>首先来说下HTTP的几种请求方式：</p>
<blockquote>
<p>HTTP定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　-<a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">hyddd</a></p>
</blockquote>
<h2 id="POST请求方式"><a href="#POST请求方式" class="headerlink" title="POST请求方式"></a>POST请求方式</h2><p>我之前写过简单的爬虫程序，发现POST和GET是两种最常用的请求方式。我们先动手实践下POST请求方式，完成”客户端发送什么，服务器端就返回什么”这样一个任务，然后在客户端打印出结果验证下：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">req = requests.post(url=url,data=data) </div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>创建server.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        dict_data=request.form <span class="comment">#type:ImmutableMultiDict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not POST'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！<br>我们也可以添加报头，服务端根据报头中的Content-Type字段来获知请求中的消息主体是用何种方式进行编码，再对消息主体进行解析。我们将上面的代码稍作改动，添加Content-Type为application/x-www-form-urlencoded的报头，以form表单提交数据：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>server.py不变<br>运行server.py，然后运行client.py，会输出’hello’，交互成功！实际上，第一个例子中，报头会自动添加application/x-www-form-urlencoded的Content-Type，所以这里server.py不变没有问题。<br>当然，我们还可以以json字符串形式提交数据，添加Content-Type为application/json的报头：<br>创建client.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;)</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>创建server.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        dict_data=request.get_json() <span class="comment">#dict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not POST'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！<br>但是如果我们去掉Content-Type为application/json的报头：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;)</div><div class="line">req = requests.post(url=url,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>server.py不变。<br>运行server.py，然后运行client.py，server端会报错！！！原来报头不会自动添加application/json的Content-Type，服务器端不能将请求数据解析为json，所以此时request对象的json属性为None，用get_json()方法自然就不行了。别慌，我们对server.py做如下改动即可：<br>创建server.py:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        str_data=request.get_data() <span class="comment">#str</span></div><div class="line">        dict_data=json.loads(str_data) <span class="comment">#dict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not POST'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！</p>
<h2 id="GET请求方式"><a href="#GET请求方式" class="headerlink" title="GET请求方式"></a>GET请求方式</h2><p>我们再来实践下GET请求：<br>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">req = requests.get(url=url,params=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>创建server.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        dict_data=request.args <span class="comment">#type=ImmutableMultiDict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'not GET'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出’hello’，交互成功！其实，我们在client.py加入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> (req.url)</div></pre></td></tr></table></figure></p>
<p>看到输出的url为<a href="http://127.0.0.1:5000/api?msg=hello" target="_blank" rel="external">http://127.0.0.1:5000/api?msg=hello</a> ，也就是说，GET请求的数据会附在url之后（就是把数据放置在HTTP协议头中），以?分割url和传输数据，并且参数之间以&amp;相连。我们在本地浏览器访问<a href="http://127.0.0.1:5000/api?msg=nice" target="_blank" rel="external">http://127.0.0.1:5000/api?msg=nice</a> ，就可以看到网页显示’nice’。<br><a href="http://docs.jinkan.org/docs/flask/api.html#id5" target="_blank" rel="external">这里</a>有Flask API的说明，可以看下”进入的请求对象”这一部分了解下request的属性和方法。</p>
<h2 id="状态码和错误处理"><a href="#状态码和错误处理" class="headerlink" title="状态码和错误处理"></a>状态码和错误处理</h2><p>最后再来讲下状态码和错误处理，这也是很重要的。我们比较熟悉的状态码有200-OK，400-Bad Request，404-Not Found，500 Internal Server Error等。正常情况下，用户将得到正确的结果，此时HTTP状态为200-OK ，但如果用户调用API的方式不当，服务器将会返回对应的错误，用户就可以根据状态码来判断错误类型进而调整调用方法。<br>但是，默认的错误信息比较笼统，比如返回400-Bad Request时，到底请求哪里出了问题，用户也很难判断。我们在使用Flask设计RESTful API时，可以使用@error_handler修饰器覆盖默认的Flask错误处理，自定义错误信息的描述，方便用户修改错误。举个例子：<br>我们创建server.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#server.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,jsonify</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        dict_data=request.args <span class="comment">#ImmutableMultiDict</span></div><div class="line">        <span class="keyword">return</span> dict_data[<span class="string">'msg'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> bad_method()</div><div class="line"></div><div class="line"><span class="meta">@app.errorhandler(405)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_method</span><span class="params">(error=None)</span>:</span></div><div class="line">    message=&#123;</div><div class="line">        <span class="string">'status'</span>:<span class="number">405</span>,</div><div class="line">        <span class="string">'message'</span>:<span class="string">'HTTP method only allows GET'</span></div><div class="line">    &#125;</div><div class="line">    resp=jsonify(message)</div><div class="line">    resp.status_code=<span class="number">405</span></div><div class="line">    <span class="keyword">return</span> resp</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>创建client.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url = <span class="string">'http://127.0.0.1:5000/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'hello'</span>&#125;</div><div class="line">req = requests.post(url=url,data=data) </div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure></p>
<p>运行server.py，然后运行client.py，会输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"message"</span>: <span class="string">"HTTP method only allows GET"</span>, </div><div class="line">  <span class="string">"status"</span>: 405</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看到这样的返回信息，我想用户很清楚调用API时错在哪了吧。</p>
<h1 id="对答机器人的调用示例"><a href="#对答机器人的调用示例" class="headerlink" title="对答机器人的调用示例"></a>对答机器人的调用示例</h1><p>在我的项目中，所有的API访问都是通过HTTP请求的方式。并且需要从<a href="http://101.200.59.7/api" target="_blank" rel="external">http://101.200.59.7/api</a> 进行访问。只支持GET和POST方式的HTTP请求。看下微信公众平台的调用效果吧：<br><img src="http://ouzjv2e18.bkt.clouddn.com/weixin_small.png" alt="wechat.png"><br>因为语料和模型还不完善，对答机器人还有些“弱智”。你可以加下面的公众号体验一下：<br><img src="http://ouzjv2e18.bkt.clouddn.com/scan.jpg" alt="scan.jpg"></p>
<h2 id="GET方式："><a href="#GET方式：" class="headerlink" title="GET方式："></a>GET方式：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗？'</span>&#125;</div><div class="line">req = requests.get(url=url,params=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<h2 id="POST方式："><a href="#POST方式：" class="headerlink" title="POST方式："></a>POST方式：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗？'</span>&#125;</div><div class="line">req = requests.post(url=url,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗？'</span>&#125;</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗'</span>&#125;)</div><div class="line">req = requests.post(url=url,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#clent.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">url=<span class="string">'http://101.200.59.7/api'</span></div><div class="line">data=json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'吃了吗'</span>&#125;)</div><div class="line">headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;</div><div class="line">req = requests.post(url=url,headers=headers,data=data)</div><div class="line"><span class="keyword">print</span> (req.content)</div></pre></td></tr></table></figure>
<h2 id="错误响应："><a href="#错误响应：" class="headerlink" title="错误响应："></a>错误响应：</h2><table>
<thead>
<tr>
<th>HTTP状态码</th>
<th>错误信息</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>400</td>
<td>msg must exist</td>
<td>数据必须以’msg’:’your data’形式传入</td>
</tr>
<tr>
<td>400</td>
<td>Content-Type must be application/json or application/x-www-form-urlencoded</td>
<td>报头只支持json和form两种形式</td>
</tr>
<tr>
<td>405</td>
<td>HTTP method must be GET or POST</td>
<td>HTTP请求只支持GET和POST</td>
</tr>
</tbody>
</table>
<p>其他错误请参考<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">这里</a>。</p>
<h1 id="遇坑小记"><a href="#遇坑小记" class="headerlink" title="遇坑小记"></a>遇坑小记</h1><p>以上示例代码在python2.7环境可以成功运行。在python3环境中需要注意：</p>
<ul>
<li>POST以不加报头的json形式传输数据时，对于服务器端，python3上 request.headers没有’Content-Type’这一项，而python2上’Content-Type’为空。 </li>
<li><a href="http://www.cnblogs.com/txw1958/archive/2012/07/19/2598885.html" target="_blank" rel="external">python3最重要的新特性大概要算是对文本和二进制数据作了更为清晰的区分</a>。python3 flask request.get_data()方法返回bytes，转成string需要decode(‘ascii’)。而python2 flask request.get_data()返回string。客户端打印结果req.content也有bytes和string的差别。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;During his own Google interview, Jeff Dean was asked the  implications if P=NP were true.  He said, “P = 0 or N = 1.” Then, before  the interviewer had even finished laughing, Jeff examined Google’s  public certificate and wrote the private key on the whiteboard. LOL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一篇文章讲了基于Tensorflow seq2seq 的对答机器人在阿里云上的部署（Flask+Nginx+Gunicorn），这里打算动手写个简单的RESTful API ，方便大家调用。因为我是个刚入门web开发的新手，所以这篇文章算是一个对实践的小小总结吧。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="RESTful" scheme="http://houjiateng.com/tags/RESTful/"/>
    
      <category term="Flask" scheme="http://houjiateng.com/tags/Flask/"/>
    
      <category term="HTTP" scheme="http://houjiateng.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow+Flask+Nginx+Gunicorn 在阿里云的部署</title>
    <link href="http://houjiateng.com/2017/08/21/Tensorflow+Flask+Nginx+Gunicorn%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
    <id>http://houjiateng.com/2017/08/21/Tensorflow+Flask+Nginx+Gunicorn在阿里云的部署/</id>
    <published>2017-08-21T08:52:35.000Z</published>
    <updated>2017-08-31T10:14:38.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>生命在于折腾！</strong><br> 　　　　 　<strong>-某网友</strong> </p>
</blockquote>
<p>最近在做一个基于Tensorflow seq2seq 模型的对答机器人项目。模型的训练已经在本地完成（ubuntu 16.04 + python 3.5 +Tensorflow 1.2.1），对答也可以在本地用命令行形式进行，但是我并不满足这样的一种“枯燥”的展示方式，毕竟生命在于折腾，我决定尝试下Web端展示。<br>因为是第一次做python web开发，所以我的原则是用什么学什么。在做了简单的调研后，我决定采用下面的方式部署：</p>
<ul>
<li>vps：阿里云（学生有特惠）</li>
<li>Web框架：Flask（简单易上手）</li>
<li>服务器：Gunicorn+Nginx（稳定有效）</li>
</ul>
<a id="more"></a> 
<p>PS：本地系统是64位windows 7（另一台ubuntu主机在训练模型，卡的不行…）</p>
<h1 id="vps上的预准备"><a href="#vps上的预准备" class="headerlink" title="vps上的预准备"></a>vps上的预准备</h1><p>先来看下我租用的主机的配置吧，这个是最便宜的，对于我的应用足够了。（公网IP就是我项目的地址，欢迎访问。）<br><img src="http://ouzjv2e18.bkt.clouddn.com/vps.png" alt="vps.png"><br>在开始部署之前，我建议阅读下<a href="https://help.aliyun.com/document_detail/25429.html?spm=5176.doc51798.3.2.FQATex" target="_blank" rel="external">帮助与文档</a>，特别是对于像我一样的小白，可以少走不少弯路。<br>首先，我们要建立本地与vps的连接，来完成本地对远程服务器的模拟。Xshell、Putty等工具都可以，我采用的是Putty，具体步骤可以参考<a href="https://help.aliyun.com/document_detail/51798.html?spm=5176.doc25424.6.600.5gE5b6" target="_blank" rel="external">使用 SSH 密钥对连接 Linux 实例</a>。可是，按照步骤走下来，我们却发现连接不成功。我尝试ping了一下公网IP，居然也ping不通。原来，我们的安全组规则没有配置好。参考<a href="https://help.aliyun.com/knowledge_detail/40596.html?spm=5176.2020520129.105.3.77f56a74o8ztea" target="_blank" rel="external">ECS实例安全组默认的公网规则被删除导致无法ping通</a>：</p>
<blockquote>
<p>端口范围： 建议只开放 TCP 协议的端口 22 （用于 SSH） 、3389 （用于远程桌面）和 ICMP 协议（用户 PING 探测），用于探测和远程连接。</p>
</blockquote>
<p>添加这些安全组规则后，终于连接成功！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Welcome to Alibaba Cloud Elastic Compute Service !</div></pre></td></tr></table></figure></p>
<p>接下来，我们在vps上安装配置ftp服务，为后面上传项目代码做准备。具体可以参考<a href="https://yq.aliyun.com/articles/111559?spm=5176.8246799.0.0.s18sYq" target="_blank" rel="external">centos 7 安装配置ftp服务</a>。同样的问题又出现了，我们用<a href="http://jingyan.baidu.com/article/3f16e00307424b2590c1037d.html" target="_blank" rel="external">Filezilla连接阿里云</a>，发现连不上，原来和上面的那个问题一样，我们需要开放 TCP 协议的端口 20、21，做法和上面一样。另外，如果我们想上传文件到服务器上的某一文件夹中，我们需要修改该文件夹权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># chmod -R 777 [文件夹]</span></div></pre></td></tr></table></figure></p>
<p>至此，vps上的预准备完成。</p>
<h1 id="利用Anaconda安装Tensorflow"><a href="#利用Anaconda安装Tensorflow" class="headerlink" title="利用Anaconda安装Tensorflow"></a>利用Anaconda安装Tensorflow</h1><p>CentOS自带python2，因为我开发环境是python3，所以需要安装python3。并且，还要安装Tensorflow。这里我推荐用Anaconda，方便快捷。<br>首先，在本地<a href="https://www.continuum.io/downloads" target="_blank" rel="external">下载</a>对应版本的Anaconda，我这里选择的是Python 3.6 version。<br><img src="http://ouzjv2e18.bkt.clouddn.com/anaconda.png" alt="anaconda.png"><br>下载完成后，用FileZilla将其上传至服务器某一目录下，在putty上，cd到该目录，完成安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bash Anaconda3-4.4.0-Linux-x86_64.sh</span></div></pre></td></tr></table></figure></p>
<p>然后，建立一个Tensorflow的运行环境，并在conda环境中安装Tensorflow：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># conda create -n tensorflow python=3.5</span></div><div class="line"><span class="comment"># source activate tensorflow</span></div><div class="line"><span class="comment"># pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.1-cp35-cp35m-linux_x86_64.whl</span></div></pre></td></tr></table></figure></p>
<p>最后，测试安装是否成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python</span></div><div class="line">&gt;&gt;&gt; import tensorflow as tf</div><div class="line">&gt;&gt;&gt; hello=tf.constant(<span class="string">'hello world'</span>)</div><div class="line">&gt;&gt;&gt; sess=tf.Session()</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span> (sess.run(hello))</div><div class="line">&gt;&gt;&gt; <span class="built_in">exit</span>()</div></pre></td></tr></table></figure></p>
<p>退出Tensorflow环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source deactivate</span></div></pre></td></tr></table></figure></p>
<h1 id="安装Flask-Nginx-Gunicorn"><a href="#安装Flask-Nginx-Gunicorn" class="headerlink" title="安装Flask+Nginx+Gunicorn"></a>安装Flask+Nginx+Gunicorn</h1><p>首先安装Flask：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source activate tensorflow</span></div><div class="line"><span class="comment"># pip install flask</span></div></pre></td></tr></table></figure></p>
<p>然后我们测试下Flask是否安装成功。我们在本地创建个hello.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.debug=<span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">5000</span>)</div></pre></td></tr></table></figure></p>
<p>将此文件上传至服务器 /home/mondon/www/my_flask中（你可以自定义），在putty上cd到此目录下，运行此文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python hello.py</span></div></pre></td></tr></table></figure></p>
<p>这时，你在本地打开浏览器，输入你的公网IP和端口号（我是101.200.59.7:5000），会看到网页上显示如下，表明Flask安装成功。<br><img src="http://ouzjv2e18.bkt.clouddn.com/helloworld.png" alt="helloworld.png"><br>按Ctrl+C退出运行hello.py。</p>
<blockquote>
<p>我们知道 Flask 中自带了 web server，通过 Werkzeug，我们可以搭建 WSGI 服务，运行我们的网站，但 Flask 是 Web 框架，并不是 Web 服务器，尽管 Werkzeug 很强大，但只能用于开发，不能用于生产。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　-<a href="http://www.cnblogs.com/knarfeh/p/5616515.html" target="_blank" rel="external">knarfeh</a></p>
</blockquote>
<p>生产环境中，通常采用Gunicorn/uWSGI+Nginx的组合作为web服务器，因为我没有什么web开发经历，对此了解也不深，就先跟着老司机走了。<br>下面安装Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum install nginx</span></div></pre></td></tr></table></figure></p>
<p>修改Nginx默认配置，我的Nginx配置文件在 /etc/nginx/nginx.conf，修改nginx.conf中的如下位置的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80 default_server;</div><div class="line">    listen       [::]:80 default_server;</div><div class="line">    server_name  101.200.59.7; <span class="comment">#你的公网IP</span></div><div class="line">    root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">    <span class="comment"># Load configuration files for the default server block.</span></div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8000; <span class="comment"># 这里是指向gunicorn host的服务地址，后面会讲。</span></div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后运行Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx</span></div></pre></td></tr></table></figure></p>
<p>这时还是在本地浏览器输入你的公网IP，会有如下显示，Nginx配置完成：<br><img src="http://ouzjv2e18.bkt.clouddn.com/nginx.png" alt="nginx"><br>关闭nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx -s stop</span></div></pre></td></tr></table></figure></p>
<p>我们再来安装Gunicorn：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pip install gunicorn</span></div></pre></td></tr></table></figure></p>
<p>好了，所有的配置已经完成，接下来就是如何启动我们的项目了。我们先cd到hello.py所在的目录下，然后依次启动Nginx、Gunicorn，我们的hello.py项目就启动了！（注意，这里127.0.0.1:8000 与上面nginx配置要一致）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx</span></div><div class="line"><span class="comment"># nohup gunicorn -b 127.0.0.1:8000 hello:app &amp;</span></div></pre></td></tr></table></figure></p>
<p>访问公网IP来验证下：<br><img src="http://ouzjv2e18.bkt.clouddn.com/helloworld2.png" alt="helloworld.png"></p>
<h1 id="Tensorflow项目的部署"><a href="#Tensorflow项目的部署" class="headerlink" title="Tensorflow项目的部署"></a>Tensorflow项目的部署</h1><p>既然”hello world”项目都已经实现了，Tensorflow项目也是如出一辙了。<br>先来看下我项目的截图吧，Web前端设计来自<a href="https://github.com/undersail/easybot" target="_blank" rel="external">undersail</a>，很漂亮！<br><img src="http://ouzjv2e18.bkt.clouddn.com/msbot_new.png" alt="msbot.png"><br>在本地，我已经将模型训练好了，因此，我们只要把模型和代码一并上传。然后在启动文件中（类似于上面的hello.py），先初始化并加载模型，然后开始监听端口。有post请求时，将接收到的’msg’信息feed到我们的seq2seq模型，就可以得到对答机器人的回答了。<br>项目代码已托管于<a href="https://github.com/MSintern/msbot_seq2seq" target="_blank" rel="external">github</a>，我们下篇博客见~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;生命在于折腾！&lt;/strong&gt;&lt;br&gt; 　　　　 　&lt;strong&gt;-某网友&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在做一个基于Tensorflow seq2seq 模型的对答机器人项目。模型的训练已经在本地完成（ubuntu 16.04 + python 3.5 +Tensorflow 1.2.1），对答也可以在本地用命令行形式进行，但是我并不满足这样的一种“枯燥”的展示方式，毕竟生命在于折腾，我决定尝试下Web端展示。&lt;br&gt;因为是第一次做python web开发，所以我的原则是用什么学什么。在做了简单的调研后，我决定采用下面的方式部署：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vps：阿里云（学生有特惠）&lt;/li&gt;
&lt;li&gt;Web框架：Flask（简单易上手）&lt;/li&gt;
&lt;li&gt;服务器：Gunicorn+Nginx（稳定有效）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="http://houjiateng.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Tensorflow" scheme="http://houjiateng.com/tags/Tensorflow/"/>
    
      <category term="Flask" scheme="http://houjiateng.com/tags/Flask/"/>
    
      <category term="vps" scheme="http://houjiateng.com/tags/vps/"/>
    
      <category term="Nginx" scheme="http://houjiateng.com/tags/Nginx/"/>
    
      <category term="Gunicorn" scheme="http://houjiateng.com/tags/Gunicorn/"/>
    
  </entry>
  
</feed>
